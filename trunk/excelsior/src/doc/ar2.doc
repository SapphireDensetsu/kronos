.HEAD 1 '@wАРХИТЕКТУРА                          ОПИСАНИЕ  СИСТЕМЫ  КОМАНД@W'
.HEAD 0 '@wАРХИТЕКТУРА                          ОПИСАНИЕ  СИСТЕМЫ  КОМАНД@W'
.TAIL 1 '@w%D%21d%20x%K@W'
.TAIL 0 '@w%D%21d%20x%K@W'
                  ОПИСАНИЕ  СИСТЕМЫ  КОМАНД


     Данное  описание  не является самостоятельным документом.
Можно   рассматривать   его   как   подробный   и  пространный
комментарий   к   интерпретатору  системы  команд  процессоров
КРОНОС. Здесь опущены определения основных понятий архитектуры
семейства  КРОНОС,  их  можно  найти  в  разделе  "Виртуальная
Модула-2 машина".


     Код команды

     Исполнение  любой  команды  начинается с выборки ее кода.
Код  команды  имеет  8-битовую  ширину. Он рассматривается как
номер  команды  и  полностью  определяет  алгоритм  исполнения
команды.  В  нем нет никаких полей или способов адресации. Код
команды  -  это  только байт и больше ничего. В редких случаях
группа  команд  может  иметь  одинаковый  код  (так называемые
escape-команды).   В   таких   случаях   следующий  байт  кода
определяет,  какая  именно  команда  из группы будет исполнена
(см., например, FFCT).


     Операнды

     После   выборки   кода   команды  определен  алгоритм  ее
исполнения.  Некоторые  операнды команд располагаются на стеке
выражений  (А-стек), другие могут следовать непосредственно за
кодом   команды,   как  последовательность  байтов.  Последние
называются  непосредственными  операндами,  но  они никогда не
могут быть абсолютными адресами.


     Выборка кода

     Выборка кода производится с помощью процедур Next, Next2,
Next4   (см.  Интерпретатор  системы  команд).  Эти  процедуры
возвращают    байт,    два    байта   и   слово,   увеличивая,
соответственно,  счетчик  команд PC на один, два или четыре. В
терминах Модулы-2 эти процедуры выглядят так:

     PROCEDURE Next(): BYTE;
     BEGIN INC(PC); RETURN INTEGER(F^[PC-1])
     END Next;

     PROCEDURE Next2(): WORD16;
     BEGIN RETURN Next()+Next()*100h
     END Next2;

     PROCEDURE Next4(): WORD;
     BEGIN RETURN Next2()+Next2()*10000h
     END Next4;


     Стек выражений

     Стек  выражений  используется  для вычисления выражений и
работы  с  аргументами  команд.  Работу со стеком осуществляют
процедуры,  называемые в интерпретаторе Pop (взять со стека) и
Push (положить на стек).

     PROCEDURE Push(X: WORD);
     BEGIN A[sp]:=X;
       IF sp<ESdepth THEN INC(sp) ELSE Ipt:=TRUE; IptNo:=4Ch END;
     END Push;

     PROCEDURE Pop(): INTEGER;
     BEGIN
       IF sp=0 THEN Ipt:=TRUE; IptNo:=4Ch ELSE DEC(sp) END;
       RETURN A[sp];
     END Pop;

     Везде  в  дальнейшем под словами "взять со стека", "брать
со стека" следует понимать действия:
     1)  проверяется, не пуст ли стек выражений; если пуст, то
возбуждается прерывание с номером 4Ch;
     2)  иначе  с  вершины стека выражений считывается слово и
счетчик  стека  уменьшается  на  единицу; таким образом, слово
оказывается счеркнутым.
     Под словами "класть на стек", "загрузить на стек" следует
понимать действия:
     1)   элементу  стека  выражений  с  номером,  на  который
указывает   счетчик,   присваивается   то   значение,  которое
загружается;
     2)  если  счетчик  меньше  границы стека выражений, то он
увеличивается   на  единицу,  иначе  вызывается  прерывание  с
номером 4Ch.
     Если  не  указано,  о каком стеке идет речь, то имеется в
виду стек выражений.


     4-битовые непосредственные операнды

     Поскольку  система  команд Кроноса очень маленькая (менее
128  команд), мы сочли возможным использовать 4 младших бита в
некоторых  часто исполняемых командах для 4-битового смещения.
Такая  команда  может  быть  описана  как  множество  из 16-ти
различных   команд   (см.   "Интерпретатор")  или  как  просто
4-битовая команда с четырьмя битами непосредственного операнда
(как в этом описании).

     Заметим,   что   все   чиcла,   встречающиеся   далее   -
шестнадцатеричные  (и  поэтому снабжены символом 'h' - 'hex').
.PAGE

@wLI0@W..@wLI0F@W                       0h..0Fh
Load Immediate
Код операции:                   4 бита          0h
Непосредственные операнды:      4 бита          0h..0Fh
Длина команды:                  1 байт
Действие:
     Загружает  на  стек значение, соответствующее 4-м младшим
битам  кода  команды (из отрезка 00h..0Fh), в виде 32-битового
слова с ведущими нулями.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(IR MOD 10h);


@wLIB@W                             10h
Load Immediate Byte
Код операции:                   1 байт         10h
Непосредственные операнды:      1 байт         0h..0FFh
Длина команды:                  2 байта
Действие:
     Загружает    значение   непосредственного   операнда   из
диапазона  00h..0FFh  (1  байта кода, следующих за командой) и
кладет его на стек в виде 32-битового слова с ведущими нулями.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Push(Next())

@wLID@W                             11h
Load Immediate Double Byte
Код операции:                   1 байт          11h
Непосредственные операнды:      2 байта         0h..0FFFFh
Длина команды:                  3 байта
Действие:
     Загружает    значение   непосредственного   операнда   из
диапазона  00h..0FFFFh (2 байта кода, следующих за командой) и
кладет его на стек в виде 32-битового слова с ведущими нулями.
     PC продвигается на 3 вперед.

В терминах Модулы-2:
     Push(Next2())

@wLIW@W                             12h
Load Immediate Word
Код операции:                   1 байт          12h
Непосредственные операнды:      4 байта         0h..0FFFFFFFFh
Длина команды:                  5 байт
Действие:
     Загружает    значение   непосредственного   операнда   из
диапазона   00h..0FFFFFFFFh   (4   байта  кода,  следующих  за
командой) и кладет его на стек в виде 32-битового слова.
     PC продвигается на 5 вперед.

Замечание. Числа представляются в двоично-дополнительном коде.
           Диапазон  целых:
           -2**31  <=  x  <=  2**31-1,
           или, в шестнадцатеричном представлении,
           80000000h <= x <=   7FFFFFFFh.
           "-1" представляется как 0FFFFFFFFh.

Замечание. Только  команда  LIW  позволяет  положить  на  стек
           отрицательное  число.  Но  можно породить небольшие
           отрицательные  числа  и  по-другому:  загружать  их
           абсолютные величины и изменять знак командой NEG. В
           настоящих  моделях процессоров это более эффективно
           и всегда более экономно по памяти.

В терминах Модулы-2:
     Push(Next4())

@wLIN@W                             13h
Load Immediate Nil
Код операции:                   1 байт          13h
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Загружает  на  стек несуществующий  адрес (NIL).
     PC продвигается на 1 вперед.

Замечание. Значение  NIL  зависит от модели процессора. Это не
           влияет  на  переносимость программного обеспечения.
           Так,  например,  в  Кронос  2.2 NIL равен FFFFFh. В
           этой   модели  после  обращения  по  такому  адресу
           возбуждается прерывание с номером 03h.

В терминах Модулы-2:
     Push(NIL)

@wLLA@W                             14h
Load Local Address
Код операции:                   1 байт          14h
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Прибавляет   к  содержимому  L-регистра  непосредственный
операнд (байт, следующий за кодом команды) и кладет полученную
сумму  на  стек.  PC  продвигается  на  2  вперед. Эта команда
позволяет  загрузить  на стек адрес локальной переменной. Если
смещение   переменной  относительно  L-регистра  больше  0FFh,
задача  решается  комбинированием команд LLA, LI, LIB, LID или
LIW c ADD.

В терминах Модулы-2:
     Push(L+Next())

@wLGA@W                             15h
Load Global Address
Код операции:                   1 байт          15h
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Прибавляет   к  содержимому  G-регистра  непосредственный
операнд (байт, следующий за кодом команды) и кладет полученную
сумму  на  стек.  PC  продвигается  на  2  вперед. Эта команда
позволяет  загрузить на стек адрес глобальной переменной. Если
смещение   переменной  относительно  G-регистра  больше  0FFh,
задача  решается  комбинированием команд LGA, LI, LIB, LID или
LIW c ADD.

В терминах Модулы-2:
     Push(G+Next())

@wLSA@W                             16h
Load Stack Address
Код операции:                   1 байт          16h
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Берет  слово со стека, прибавляет к нему непосредственный
операнд   (байт,   следующий   за  кодом  команды),  и  кладет
полученную  сумму  на  стек.  PC продвигается на 2 вперед. Эта
команда  позволяет заменить адрес, лежащий на стеке, на адрес,
смещенный  относительно  него.  Это используется для получения
адресов  полей  в тех случаях, когда адрес записи уже загружен
на  стек.  Когда  смещение  поля  больше 0FFh, задача решается
комбинированием команд LGA, LI, LIB, LID или LIW c ADD.

Замечание. LSA XX семантически эквивалентно последовательности
           LIB  XX  ADD. В RISC-модели Кроноса этой команды не
           будет.

В терминах Модулы-2:
     Push(Pop()+Next())

@wLEA@W                             17h
Load External Address
Код операции:                   1 байт          17h
Непосредственные операнды:      2 байта         0h..0FFh
Длина команды:                  3 байта
Действие:
     Из  следующего  байта кода берется номер внешнего модуля.
По  этому  номеру  вычисляется  индекс в DFT модуля. Элемент с
этим  индексом  содержит  указатель на элемент глобальной DFT.
Указанный  элемент  глобальной  DFT  содержит ссылку на начало
области глобальных данных внешнего модуля, о котором шла речь.
На  стек загружается адрес, взятый относительно начала области
глобальных  данных  внешнего  модуля  со  смещением, взятым из
следующего байта сегмента кода.
     PC продвигается на 3 вперед.

В терминах Модулы-2:
     i:=G-Next()-1; (* индекс в DFT модуля.*)
     adr:=Core[i]; (* указатель на элемент большой DFT *)
     Push(Core[adr]+Next())

@wJFLC@W                            18h
Jump Forward Long Condition
Код операции:                   1 байт          18h
Непосредственные операнды:      2 байта         0h..0FFh
Длина команды:                  3 байта
Действие:
     Выбирает  двухбайтовый  непосредственный операнд - размер
(N) возможного скачка к следующей команде. PC увеличивается на
3.  Со стека берется значение. Если это 0, то PC увеличивается
на  N,  иначе  (при  любом  ненулевом  значении)  далее  будет
выполняться следующая команда.

В терминах Модулы-2:
     IF Pop()=0 THEN PC:=Next2()+PC
     ELSE INC(PC,2) END

@wJFL@W                             19h
Jump Forward Long
Код операции:                   1 байт          19h
Непосредственные операнды:      2 байта         0h..0FFFFh
Длина команды:                  3 байта
Действие:
     Выбирается двухбайтовый непосредственный операнд - размер
(N) скачка к следующей команде. PC увеличивается на 3+N.

В терминах Модулы-2:
     PC:=Next2()+PC;

@wJFSC@W                            1Ah
Jump Forward Short Condition
Код операции:                   1 байт          1Ah
Непосредственные операнды:      1 байта         0h..0FFh
Длина команды:                  2 байта
Действие:
     Выбирает  однобайтовый  непосредственный операнд - размер
(N) возможного скачка к следующей команде. PC увеличивается на
2.  Со стека берется значение. Если это 0, то PC увеличивается
на  N,  иначе  (при  любом  ненулевом  значении)  далее  будет
выполняться следующая команда.

В терминах Модулы-2:
     IF Pop()=0 THEN PC:=Next()+PC
     ELSE INC(PC) END

@wJFS@W                             1Bh
Jump Forward Short
Код операции:                   1 байт          1Bh
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Выбирается однобайтовый непосредственный операнд - размер
(N) скачка к следующей команде. PC увеличивается на 2+N.

В терминах Модулы-2:
     PC:=Next()+PC;

@wJBLC@W                            1Ch
Jump Back Long Condition
Код операции:                   1 байт          1Ch
Непосредственные операнды:      2 байта         0h..0FFFFh
Длина команды:                  3 байта
Действие:
     Со  стека берется значение. При условии, что это ноль, PC
продвигается  назад  на  столько  байт, сколько указано в двух
байтах, следующих за байтом команды. Иначе продвигается вперед
на 3 байта.

В терминах Модулы-2:
     IF Pop()=0 THEN PC:=-Next2()+PC
     ELSE INC(PC,2) END

@wJBL@W                             1Dh
Jump Back Long
Код операции:                   1 байт          1Dh
Непосредственные операнды:      2 байта         0h..0FFFFh
Длина команды:                  3 байта
Действие:
     PC  продвигается назад на столько байт, сколько указано в
двух байтах, следующих за байтом команды.

В терминах Модулы-2:
     PC:=-Next2()+PC;

@wJBSC@W                            1Eh
Jump Back Short Condition
Код операции:                   1 байт          1Eh
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Со  стека берется значение. При условии, что это ноль, PC
продвигается  назад  на столько байт, сколько указано в байтe,
следующем  за  байтом  команды. Иначе продвигается вперед на 1
байт.

В терминах Модулы-2:
     IF Pop()=0 THEN PC:=-Next()+PC
     ELSE INC(PC) END

@wJBS@W                             1Fh
Jump Back Short
Код операции:                   1 байт          1Fh
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     PC  продвигается назад на столько байт, сколько указано в
байте, следующем за байтом команды.

В терминах Модулы-2:
     PC:=-Next()+PC;

@wLLW@W                             20h
Load Local Word
Код  операции:                  1  байт         20h
Непосредственные  операнды:     1 байт          0h..0FFh
Длина  команды:                 2  байта
Действие:
     Загружает   на   стек   локальное   слово   со  смещением
относительно   L-регистра,  взятым  из  следующего  за  байтом
команды байта.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Push(Core[L+Next()])

@wLGW@W                             21h
Load Global Word
Код операции:                   1 байт          21h
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Загружает   на   стек   глобальное   слово  со  смещением
относительно   G-регистра,  взятым  из  следующего  за  байтом
команды байта.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Push(Core[G+Next()])

@wLEW@W                             22h
Load External Word
Код операции:                   1 байт          22h
Непосредственные операнды:      2 байта         0h..0FFh
Длина команды:                  3 байта
Действие:
     Из   сегмента   кода   выбираются  два  операнда.  Первый
соответствует   номеру  внешнего  модуля,  второй  -  смещению
относительно  G-регистра  этого  модуля.  На  стек загружается
внешнее  глобальное  слово  из  указанного  модуля с указанным
смещением.
     PC продвигается на 3 вперед.

В терминах Модулы-2:
     i:=G-Next()-1; adr:=Core[Core[i]]; (* external G *)
     Push(Core[adr+Next()])

@wLSW@W                             23h
Load Stack addressed Word
Код операции:                   1 байт          23h
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Загружает  на стек слово c адресом, смещенным на столько,
сколько указано в следующем байте кода, относительно значения,
взятого с вершины стека.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Push(Core[Pop()+Next()])

@wLLW4@W..@wLLW0F@W                     24h..2Fh
Load Local Word
Код операции:                   4 бита          2h
Непосредственные операнды:      4 бита          4h..0Fh
Длина команды:                  1 байт
Действие:
     Загружает   на   стек  локальное  слово  со  смещением  в
диапазоне от 4h до 0Fh относительно L-регистра.
     PC продвигается на 1 вперед.
Замечание:    Первые  четыре  слова локальной области содержат
              связующую  информацию,  поэтому  они не доступны
              через эти номера (см. LLW (20h)).

В терминах Модулы-2:
     Push(Core[L+IR MOD 10h])

@wSLW@W                             30h
Store Local Word
Код операции:                   1 байт          30h
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Присваивает  значение,  взятое со стека, локальному слову
со  смещением,  указанным  в  следующем  байте  сегмента кода,
относительно L-регистра.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Core[L+Next()]:=Pop()

@wSGW@W                             31h
Store Global Word
Код операции:                   1 байт          31h
Непосредственные операнды:      1 байт          0h..0FFh
Длина команды:                  2 байта
Действие:
     Присваивает  значение, взятое сo стека, глобальному слову
со  смещением  относительно  G-регистра,  взятым из следующего
байта сегмента кода.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Core[G+Next()]:=Pop()

@wSEW@W                             32h
Store  External  Word
Код  операции:                  1 байт          32h
Непосредственные  операнды:     2  байта        0h..0FFh
Длина команды:                  3 байта
Действие:
     Из сегмента кода выбираются два операнда - номер внешнего
модуля  и  смещение  относительно  его  G-регистра.  Значение,
взятое  сo  стека, присваивается внешнему глобальному слову из
указанного модуля с указанным смещением.
     PC продвигается на 3 вперед.

В терминах Модулы-2:
     i:=G-Next()-1; adr:=Core[Core[i]]; (* external G *)
     Core[adr+Next()]:=Pop()

@wSSW@W                             33h
Store Stack addressed Word
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Присваивает   значение,   взятое   со   стека,  слову  со
смещением,  взятым  из  следующего  байта  кода,  относительно
адреса, взятого со стека.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     i:=Pop(); Core[Pop()+Next()]:=i

@wSLW4@W..@wSLW0F@W                     34h..3Fh
Store Local Word
Код операции:                   4 бита          3h
Непосредственные операнды:      4 бита          4h..0Fh
Длина команды:                  1 байт
Действие:
     Присваивает  значение,  взятое сo стека, локальному слову
со смещением в диапазоне от 4h до 0Fh относительно L-регистра.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Core[L+IR MOD 10h]:=Pop()

@wLXB@W                             40h
Load indeXed Byte
Код операции:                   1 байт          40h
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     На  стеке - два операнда. Нижний - словный адрес, верхний
-  байтовое  смещение  относительно этого адреса. Оба операнда
счеркиваются  со  стека, и на стек загружается байт, взятый из
памяти  по  указанному  словному  адресу  с указанным байтовым
смещением.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(ByteCore[Pop()*4+i]);

@wLXW@W                             41h
Load indeXed Word
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     На  стеке - два операнда. Нижний - словный адрес, верхний
-  словное  смещение  относительно  этого адреса. Оба операнда
счеркиваются  .со стека, и на стек загружается слово, взятое из
памяти по указанному словному адресу с указанным смещением.
     PC продвигается вперед на 1.

В терминах Модулы-2:
     i:=Pop(); Push(Core[Pop()+i])

@wLGW2@W..@wLGW0F@W                     42h..4Fh
Load Global Word
Код операции:                   4 бита          4h
Непосредственные операнды:      4 бита          2h..0Fh
Длина команды:                  1 байт
Действие:
     Загружает   на   стек   глобальное   слово  со  смещением
относительно G-регистра, взятым из диапазона от 2h до 0Fh.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(Core[G+IR MOD 10h])

@wSXB@W                             50h
Store indeXed Byte
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     На  стеке  - три операнда. Нижний - словный адрес, выше -
байтовое смещение относительно этого адреса. Верхний операнд -
байт,  который  выгружается  в  память  по указанному словному
адресу  с  указанным  байтовым  смещением.  Все  три  операнда
счеркиваются со стека.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     j:=Pop(); i:=Pop(); ByteCore[Pop()*4+i]:=j;

@wSXW@W                             51h
Store indeXed Word
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     На  стеке  - три операнда. Нижний - словный адрес, выше -
словное  смещение относительно этого адреса. Верхний операнд -
слово,  которое  выгружается  в  память по указанному словному
адресу с указанным смещением. Все три операнда счеркиваются со
стека.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     j:=Pop(); i:=Pop(); Core[Pop()+i]:=j

@wSGW2@W..@wSGW0F@W                     52h..5Fh
Store Global Word
Код операции:                   4 бита          5h
Непосредственные операнды:      4 бита          2h..0Fh
Длина команды:                  1 байт
Действие:
     Присваивает  значение, взятое сo стека, глобальному слову
со   смещением   из   диапазона  от  2h  до  0Fh  относительно
G-регистра.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Core[G+IR MOD 10h]:=Pop()

@wLSW0@W..@wLSW0F@W                     60h..6Fh
Load Stack addressed Word
Код операции:                   4 бита          6h
Непосредственные операнды:      4 бита          0h..0Fh
Длина команды:                  1 байт
Действие:
     Загружает  на  стек  из памяти слово, взятое по адресу со
смещением  0..0Fh соответственно, относительно адреса, взятого
со стека.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(Core[Pop()+IR MOD 10h])

@wSSW0@W..@wSSW0F@W                     70h..7Fh
Store Stack addressed Word
Код операции:                   4 бита          7h
Непосредственные операнды:      4 бита          0h..0Fh
Длина команды:                  1 байт
Действие:
     Слово,  взятое  со стека, выгружает в память по адресу со
смещением  0..0Fh  соответственно относительно адреса, взятого
со стека.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Core[Pop()+IR MOD 10h]:=i

@wQUIT@W                            81h
stop processor
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Выход в пультовую микропрограмму, если она есть.
     PC продвигается вперед на 1 байт.

В терминах Модулы-2:
     ConsolMicroProgram

@wGETM@W                            82h
GET Mask
Код операции:                   1 байт          82h
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Загружает на стек слово, содержащее маску прерываний.
     PC продвигается вперед на 1 байт.

В терминах Модулы-2:
     Push(M)

@wSETM@W                            83h
SET Mask
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Если в битсете, лежащем во втором слове области локальных
данных,  не  выставлен  30-й  бит (1Eh - ChangeMaskBit) (маска
меняется  впервы.е), то этот бит выставляется, текущее значение
маски записывается в третье слово области локальных данных, со
стека берется новая маска.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     IF NOT (ChangeMaskBit IN BITSET(Core[L+2])) THEN
       (* маска меняется впервые*)
       Core[L+2]:=WORD(BITSET(Core[L+2])+{ChangeMaskBit});
       Core[L+3]:=WORD(M)
     END; M:=BITSET(Pop);

@wTRAP@W                            84h
interrupt simulation
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  значение  со стека и возбуждает прерывание с таким
номером.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     TRAP(Pop())

@wTRA@W                             85h
TRAnsfer control between processes
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Происходит  переключение двух процессов.
     Состояние   процесса   определяется  состоянием  стека  и
значениями шести регистров (G, L, PC, M, S, H).
     На стеке - два слова. Верхнее определяет процесс, который
требуется   запустить,  нижнее  -  адрес,  по  которому  нужно
записать текущий процесс.
     Регистры  текущего  процесса  записываются  в  дескриптор
процесса,  который  лежит  в  памяти  по  адресу, указанному в
регистре P.
     P-регистр   текущего  процесса  записывается  по  адресу,
взятому  в качестве второго операнда со стека, а также в слово
с  адресом  1  -  фиксированное слово памяти, в котором всегда
содержится указатель на последний процесс.
     Стек  выражений  спасается  на  процедурный стек текущего
процесса.  Для  того,  чтобы  при  спасении стека выражений не
возникло  переполнения  процедурного  стека,  регистр  границы
процедурного стека - H - указывает на (глубину стека выражений
+ 1) слов ниже фактической границы процедурного стека.
     В  верхнем  операнде  содержится  адрес  слова, в котором
лежит    указатель   на   дескриптор   процесса   (P-регистр),
подлежащего  запуску.  По  новому P-регистру восстанавливаются
значения всех регистров процесса. С вершины процедурного стека
восстанавливается  стек  выражений.  P-регистр  записывается в
фиксированное - нулевое - слово памяти.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Transfer(Pop(),i)

@wTR@W                              86h
Test & Reset
Код операции:                   1 байт          86h
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Загружает  на  стек  слово,  взятое  из памяти по адресу,
взятому с вершины стека. По этому адресу кладется 0.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(Core[i]); Core[i]:=0

@wIDLE@W                            87h
IDLE process
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Уменьшает  PC на 1. Процессор ждет прерывания, не занимая
шину.
     При чтении байта кода PC увеличивался на единицу и, таким
образом,  после  выполнения  команды  PC  остается  на прежнем
месте.

В терминах Модулы-2:
     DEC(PC); REPEAT (* не занимая шины *) UNTIL Ipt

@wADD@W                             88h
integer ADDition
Код операции:                   1 байт          88h
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Складывает  два  целых  числа,  взятые с вершины стека, и
кладет   результат   на   стек.   Если   при  этом  происходит
переполнение целого, возбуждается прерывание с номером 41h.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(Pop()+Pop())

@wSUB@W                             89h
integer SUBtraction
Код операции:                   1 байт          89h
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Вычитает  целое  число, взятое с вершины стека, из целого
числа,  взятого  с  вершины стека, и кладет результат на стек.
Если  в результате произошло переполнение целого, возбуждает.ся
прерывание с номером 41h.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(Pop()-i);

@wMUL@W                             8Ah
integer MULtiplication
Код операции:                   1 байт          8Ah
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Перемножает  два  целых  числа, взятые с вершины стека, и
кладет   результат   на  стек.  Если  в  результате  произошло
переполнение целого, возбуждается прерывание с номером 41h.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(Pop()*Pop())

@wDIV@W                             8Bh
integer DIVision
Код операции:                   1 байт          8Bh
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Делит  на  число,  взятое  с  вершины стека, целое число,
взятое  с  вершины  стека,  и кладет результат на стек. Если в
результате   произошло   переполнение   целого,   возбуждается
прерывание с номером 41h.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(Pop() DIV i)

@wSHL@W                             8Ch
integer SHift Left
Код операции:                   1 байт          8Ch
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Сдвиг   влево.   Со   стека  берутся  величина  сдвига  и
сдвигаемое  слово.  Слово  сдвигается влево на число разрядов,
равное   величине   сдвига  по  модулю  32,  при  этом  справа
дописывается    соответствующим    числом    нулей.   Единица,
встретившаяся  в старших разрядах слова, вызывает переполнение
целого,  и  возбуждается  прерывание  с номером 41h. Результат
помещается на стек.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop() MOD 20h; Push(SHL(Pop(),i))

@wSHR@W                             8Dh
integer SHift Right
Код операции:                   1 байт          8Dh
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Сдвиг   вправо.   Со  стека  берутся  величина  сдвига  и
сдвигаемое  слово.  Слово сдвигается вправо на число разрядов,
равное  величине  сдвига  по  модулю 32, дописывается при этом
слева таким же числом нулей и помещается на стек.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop() MOD 20h; Push(SHR(Pop(),i))

@wROL@W                             8Eh
word ROate Left
Код операции:                   1 байт          8Eh
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Циклический сдвиг влево. Со стека берутся величина сдвига
и  сдвигаемое слово. Слово сдвигается влево на число разрядов,
равное  величине сдвига по модулю 32. При этом старшие разряды
дописываются справа. Результат помещается на стек.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop() MOD 20h; Push(ROL(Pop(),i))

@wROR@W                             8Fh
word ROate Right
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Циклический  сдвиг  вправо.  Со  стека  берутся  величина
сдвига  и  сдвигаемое  слово. Слово сдвигается вправо на число
разрядов,  равное  величине  сдвига  по  модулю  32.  При этом
младшие  разряды  дописываются  слева. Результат помещается на
стек.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop() MOD 20h; Push(ROR(Pop(),i))

@wIO0@W..@wIO7@W                        90h..97h
Input-Output
Код операции:                   1 байт
Непосредственные операнды:
Длина команды:
Действие:
     Команды   работы   с  шиной.  Индивидуальны  для  каждого
процессора.

В терминах Модулы-2:
     CASE cpu OF
       |Kronos2_2: ioP2_2
       |Kronos2_5: ioP2_5
       |Kronos2_6: ioP2_6
     ELSE ASSERT(FALSE);
     END

@wFADD@W                            98h
Float ADDition
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Складывает  два  вещественных  числа,  взятых  с  вершины
стека.  Результат  кладет на стек. Если в рез.ультате произошло
переполнение  вещественного, возбуждается прерывание с номером
42h.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(REAL(Pop())+REAL(Pop()))

@wFSUB@W                            99h
Float SUBtraction
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Вычитает  вещественное  число, взятое с вершины стека, из
вещественного числа, взятого с вершины стека. Кладет результат
на    стек.   Если   в   результате   произошло   переполнение
вещественного, возбуждается прерывание с номером 42h.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     X:=REAL(Pop()); Push(REAL(Pop())-X)

@wFMUL@W                            9Ah
Float MULtiplication
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Перемножает  два  вещественных  числа,  взятых  с вершины
стека.  Результат  кладет на стек. Если в результате произошло
переполнение  вещественного, возбуждается прерывание с номером
42h.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(REAL(Pop())*REAL(Pop()))


@wFDIV@W                            9Bh
Float DIVision
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Делит  на  вещественное  число,  взятое  с вершины стека,
вещественное  число,  взятое с вершины стека. Кладет результат
на    стек.   Если   в   результате   произошло   переполнение
вещественного, возбуждается прерывание с номером 42h.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     X:=REAL(Pop()); Push(REAL(Pop())/X)

@wFCMP@W                            9Ch
Float CoMPare
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Cравнивает  два  вещественных  числа,  взятые  с  вершины
стека.   Если   верхнее   меньше  нижнего,  на  стек  кладутся
последовательно  1  и  0; если верхнее больше нижнего, на стек
кладутся  последовательно  0  и  1; если они равны, то на стек
кладутся 0 и 0.
 _____              _____         _____          _____
|  X  |   FCMP     |  0  |       |  1  |        |  0  |
|  Y  |  ------>   |  1  |       |  0  |        |  0  |

                    X < Y         X > Y          X = Y

     PC продвигается на 1 вперед.

В терминах Модулы-2:
     X:=REAL(Pop()); Y:=REAL(Pop());
     IF    X<Y THEN Push(1); Push(0)
     ELSIF X>Y THEN Push(0); Push(1)
     ELSE Push(0); Push(0) END

@wFABS@W                            9Dh
Float ABSolute
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со  стека  вещественное число и кладет на стек его
абсолютное значение.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     X:=REAL(Pop());
     IF X<0.0 THEN Push(-X) ELSE Push(X) END

@wFNEG@W                            9Eh
Float NEGative
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со  стека  вещественное число и кладет на стек его
противоположное значение.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(-REAL(Pop()))

@wFFCT@W                            9Fh
Float FunCTion
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Если в следующем за командой байте кода лежит 0, то берет
со  стека целое число, преобразует его в вещественное и кладет
на  стек;  если в следующем за командой байте кода лежит 1, то
берет  со  стека  вещественное  число, отсекает у него дробную
часть и полученное таким образом целое число кладет на стек.
     В этих случаях PC продвигается вперед на 2.
     Если  в  следующем за командой байте кода не 0 и не 1, PC
возвращается на 1 и возбуждается прерывание с номером 7h.

В терминах Модулы-2:
     i:=Next();
     IF    i=0 THEN Push(FLOAT(INTEGER(Pop())))
     ELSIF i=1 THEN Push.(TRUNC(   REAL(Pop())))
     ELSE DEC(PC); TRAP(7h) END;

@wLSS@W                             0A0h
integer LeSS
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Сравниваются  два  целых  числа,  взятых  со  стека. Если
нижнее меньше верхнего, на стек кладется 1, иначе 0.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(Pop()<i)

@wLEQ@W                             0A1h
integer Less or EQual
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Сравниваются  два  целых  числа,  взятых  со  стека. Если
нижнее меньше или равно верхнему, на стек кладется 1, иначе 0.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(Pop()<=i)

@wGTR@W                             0A2h
integer GreaTeR
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Сравниваются  два  целых  числа,  взятых  со  стека. Если
нижнее больше верхнего, на стек кладется 1, иначе 0.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(Pop()>i)

@wGEQ@W                             0A3h
integer Greater or EQual
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Сравниваются  два  целых  числа,  взятых  со  стека. Если
нижнее больше или равно верхнему, на стек кладется 1, иначе 0.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(Pop()>=i)

@wEQU@W                             0A4h
integer EQUal
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Сравниваются  два  целых числа, взятых со стека. Если они
равны между собой, на стек кладется 1, иначе 0.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(Pop()=Pop())

@wNEQ@W                             0A5h
integer NOt eQual
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Сравниваются  два  целых числа, взятых со стека. Если они
не равны между собой, на стек кладется 1, иначе 0.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(Pop()#Pop())

@wABS@W                             0A6h
integer ABSolute
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет   со  стека  целое  число  и  кладет  на  стек  его
абсолютное значение.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(ABS(Pop()))


@wNEG@W                             0A7h
integer NEGative
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет   со  стека  целое  число  и  кладет  на  стек  его
противоположное значение.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(-Pop())

@wOR@W                              0A8h
logical bit per bit OR
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со стека два битсета и кладет на стек результат их
сложения, то есть битсет, в котором единицы на тех местах, что
в первом битсете, и на тех местах, что во втором битсете.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     v:=BITSET(Pop()); w:=BITSET(Pop()); Push(w+v)

@wAND@W                             0A9h
logical bit per bit AND
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со стека два битсета и кладет на стек результат их
перемножения,  то  есть битсет, в котором единицы только в тех
битах, где были единицы в первом и втором битсете.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     v:=BITSET(Pop()); w:=BITSET(Pop()); Push(w*v)

@wXOR@W                             0AAh
logical bit per bit XOR
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со  стека  два  битсета и кладет на стек результат
деления  нижнего на верхний, то есть битсет, в котором единицы
на тех местах, где биты не совпали в первом и втором битсетах,
и нули - где совпали.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     v:=BITSET(Pop()); w:=BITSET(Pop()); Push(w/v)

@wBIC@W                             0ABh
logical bit per bit BIt Clear
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со  стека  два  битсета и кладет на стек результат
вычитания  верхнего  из  нижнего,  то  есть  нижний  битсет, у
которого  единицы  заменились на нули там, где у верхнего были
единицы.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     v:=BITSET(Pop()); w:=BITSET(Pop()); Push(w-v)

@wIN@W                              0ACh
IN bitset?
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  с  вершины  стека битсет и число, и кладет на стек
единицу, если число в битсете, иначе кладет ноль.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     v:=BITSET(Pop()); Push(Pop() IN v)

@wBIT@W                             0ADh
set BIT
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Устанавливает  бит с номером i, взятым с вершины стека, в
пустом  битсете,  и  кладет полученный таким образом битсет на
стек.  Если  i  оказалось  не  в  границах 0..31, возбуждается
прерывание с номером 4Ah.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop();
     IF (i<0) OR (i>=20h) THEN TRAP(4Ah)
     ELSE w:={}; INCL(w,i); Push(w) END

@wNOT@W                             0AEh
boolean NOT (not bit per bit!)
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Если  число,  взятое со стека, равно нулю, кладет на стек
единицу, в противном случае ноль.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(Pop()=0)

@wMOD@W                             0AFh
integer MODule
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со стека целое число и кладет на стек следующее за
ним число, взятое по модулю верхнего.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(Pop() MOD i)

@wDECS@W                            0B0h
DECrement S-register
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Действие, обратное действию ALLOC: берет со стека число i
и на i байт уменьшает S-регистр.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     DEC(S,Pop())

@wDROP@W                            0B1h
DROP
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина  команды:                 1 байт
Действие:
     Берет со стека значение, чтобы его проигнорировать.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop();

LODF                            0B2h
reLOaD expression stack after Function return
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Cо стека берется значение, затем из памяти загружается на
стек  его  содержимое,  которое  предварительно было спасено в
память, и сверху на стек грузится взятое значение.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); RestoreExpStack; Push(i)

@wSTORE@W                           0B3h
STORE expression stack after function call
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Если величина з.начения S-регистра, увеличенная на глубину
стека  выражений  и еще на единицу, превышает значение границы
П-стека   (H-регистр),   то   PC   уменьшается  на  единицу  и
возбуждается   прерывание   с   номером  40h.  Такая  проверка
производится  несмотря на то, что H-регистр дает заниженную на
размер стека выражений плюс единица границу П-стека, поскольку
занижение  предназначается  для  сохранения  стека выражений в
случае    переключения   процессов.
     Иначе  стек  выражений  выгружается  в  память, начиная с
адреса  S,  и следом записывается размер сохраненного стека. В
этом  случае  в  результате выполнения команды PC продвигается
вперед на 1.

В терминах Модулы-2:
     IF S+ESdepth+1>H THEN DEC(PC); TRAP(40h)
     ELSE SaveExpStack
     END

@wSTOFV@W                           0B4h
STORE expression stack with Formal function value on top
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Если величина значения S-регистра, увеличенная на глубину
стека  выражений  и  еще на двойку, превышает значение границы
П-стека   (H-регистр),   то   PC   уменьшается  на  единицу  и
возбуждается  прерывание с номером 40h.
     Иначе  со  стека  берется  значение, затем стек выражений
выгружается  в память, начиная с адреса S, следом записывается
размер  спасенного стека, а за ним взятое со стека значение. В
этом  случае  в  результате выполнения команды PC продвигается
вперед на 1.

В терминах Модулы-2:
     IF S+ESdepth+2>H THEN DEC(PC); TRAP(40h)
     ELSE i:=Pop(); SaveExpStack; Core[S]:=i; INC(S) END

@wCOPT@W                            0B5h
COPy Top of expression stack
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со  стека  значение  и затем загружает его на стек
дважды.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Push(i); Push(i)

@wCPCOP@W                           0B6h
Character array Parameter COPy
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Со  стека  берется  верхняя граница символьного массива и
вычисляется  ее  значение  в словах. Если значение S-регистра,
увеличенное  на  размер  границы  в  словах, превышает границу
П-стека, то взятое со стека значение грузится обратно на стек,
PC  возвращается  обратно  и возбуждается прерывание с номером
40h.
     Иначе  в  память  по  адресу, взятому из следующего байта
кода   относительно   начала  локальных  данных,  запоминается
текущее значение S-регистра (для того, чтобы запомнить, откуда
будет  начинаться  копия  массива).  Затем  с начала свободной
области  памяти  копируется  массив, адрес которого берется со
стека,  до  тех  пор,  пока  не  исчерпается  значение верхней
границы в словах. В этом случае PC продвигается на 2 вперед.

В терминах Модулы-2:
     i:=Pop(); (* High *) sz:=(i+4) DIV 4;
     IF S+sz>H THEN Push(i); DEC(PC); TRAP(40h)
     ELSE Core[L+Next()]:=S; adr:=Pop();
       WHILE sz>0 DO Core[S]:=Core[adr]; INC(S); INC(adr) END
     END

@wPCOP@W                            0B7h
structure Parameter allocate and COPy
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Со   стека  берется  верхняя  граница  словного  массива,
увеличивается    на   единицу.   Если   значение   S-регистра,
увеличенное  на  размер массива, превышает границу П-стека, то
взятое  значение  грузится  обратно  на  стек, PC возвращается
обратно и возбуждается прерывание с номером 40h.
     Иначе  в  память  по  адресу, взятому из следующего байта
кода   относительно   начала  локальных  данных,  запоминается
текущее значение S-регистра (для того, чтобы запомнить, откуда
будет  начинаться  копия  массива).  Затем  с начала свободной
области  памяти записывается массив, адрес которого берется со
стека,  до  тех пор, пока не исчерпается размер. В этом случае
PC продвигается на. 2 вперед.

В терминах Модулы-2:
     i:=Pop(); (* High *) sz:=i+1;
     IF S+sz>H THEN Push(i); DEC(PC); TRAP(40h)
     ELSE Core[L+Next()]:=S; adr:=Pop();
       WHILE sz>0 DO Core[S]:=Core[adr]; INC(S); INC(adr) END
     END

@wFOR1@W                            0B8h
enter FOR statement
Код операции:                   1 байт
Непосредственные операнды:      3 байта
Длина команды:                  4 байта
Действие:
     Если  S-регистр,  увеличенный  на  2,  превышает  границу
П-стека,  PC  возвращается  на  1  и возбуждается прерывание с
номером 40.
     Иначе  со  стека  берется верхняя и нижняя границы цикла,
адрес  переменной  цикла.  Из  следующего  байта сегмента кода
берется   шаг   цикла   -   если  в  следующем  байте  0,  шаг
положительный,  если  не  0  - шаг отрицательный. Если условия
цикла   не   выполняются   сразу   (конечное  значение  меньше
начального при положительном шаге или наоборот), PC изменяется
на столько, сколько указано в следующих двух байтах кода, плюс
4.  Иначе нижняя граница присваивается взятому со стека адресу
переменной  цикла,  адрес  и  верхняя  граница  запоминаются в
свободной  области  памяти  для команды FOR2. В этом случае PC
продвигается в результате выполнения команды на 4 вперед.

В терминах Модулы-2:
     IF S+2>H THEN DEC(PC); TRAP(40h)
     ELSE sz:=Next(); (* =0 up; #0 down *)
       hi:=Pop(); low:=Pop(); adr:=Pop(); k:=Next2()+PC;
       IF ((sz=0) & (low<=hi)) OR ((sz#0) & (low>=hi)) THEN
         Core[adr]:=low;
         Core[S]:=adr; INC(S); Core[S]:=hi; INC(S);
       ELSE (* цикл не исполняется не разу *) PC:=k
       END
     END

@wFOR2@W                            0B9h
end of FOR statement
Код операции:                   1 байт
Непосредственные операнды:      3 байта
Длина команды:                  4 байта
Действие:
     Если  значение  шага  цикла,  взятое  из следующего байта
кода,   больше   7Fh,   ему   переприсваивается  отрицательное
значение,  равное  (7Fh-шаг)  (шаг  цикла  всегда в промежутке
[-128..127]);  таким  образом, информация, которой располагала
команда FOR1, дублируется.
     Если   возможна  еще  одна  итерация,  то  есть  значение
переменной цикла, измененное на шаг, не выходит за границы, то
запоминается новое значение, PC уменьшается на столько байтов,
сколько указано в следующих двух байтах кода.
     Иначе  S-регистр сдвигается на 2 слова назад, счеркивая с
с П-стека значение верхней границы и адрес переменной цикла.

В терминах Модулы-2:

     hi:=Core[S-1];
     adr:=Core[S-2];
     sz:=Next();
     IF sz>7Fh THEN
       sz:=7Fh-sz    (* шаг [-128..127] *)
     END;
     k:=-Next2()+PC;
     i:=Core[adr]+sz;
     IF ((sz>=0) & (i>hi)) OR ((sz<0) & (i<hi)) THEN
       DEC(S,2); (* terminate *)
     ELSE Core[adr]:=i; PC:=k (* continue *)
     END

@wENTC@W                            0BAh
ENTer Case statement
Код операции:                   1 байт          0BAh
Непосредственные операнды:      2 байта         0h..0FFFFh
Длина команды:                  3 байта +  размер таблицы
Действие:

     Выбор   нужной   альтернативы   из   таблицы  альтернатив
выбирающего оператора (CASE) и передача управления на ее код.
     Если  S-регистр,  увеличенный  на  2,  превышает  границу
П-стека,  PC  возвращается  на  1  и возбуждается прерывание с
номером 40.
     Иначе

                                        Стеки до ENTC

          ENTC xxxx     ----  (*1*)    E-стек   P-стек
     ---> Alt 0             |
    |     ... XIT           |          |   |   |     |
   -+---> Alt 1             | (*8*)    |   |   |     |    ___
  | |     ... XIT           |          | 1 |   |     |<--| S |
  | |                       |           ~~~    |     |    ~~~
  | |     ...               |
  | |                       |           Стеки после ENTC
 -+-+---> Alt n             |
| | |     ... XIT           |          |   |   |     |    ___
| | |  -> Alt ELSE          |          |   |   |     |<--| S |
| | | |   ... XIT ----------+--------- |   |   | PC' |    ~~~
| | | |                     |        |  ~~~    |     |
| | | |   <Lo><Hi>  <-------  (*2*)  |
| | | |                       (*3,4*)|
| | |  -  <ELSE offset>       (*5*)  |
| |  ----  <Alt0 offset>             |
|  ------  <Alt1 offset>      (*6*)  |
|           ...........              |
 --------  <AltN offset>             |
                                     |
           <Continue code>  <-- PC' --

В терминах Модулы-2:
     IF S+1>H THEN DEC(PC); TRAP(40h)
     ELSE PC:=Next2()+PC; (* jump to case table *)
       k:=Pop(); low:=Next2(); hi:=Next2();
       Core[S]:=PC + 2*(hi-low) + 4; INC(S);(*PC for exit*)
       IF (k>=low) & (k<=hi) THEN
         PC:=PC+2*(k-low+1) (* jump into case table *)
       END;
       PC:=-Next2()+PC (* jump back to variant's code *)
     END

@wXIT@W                             0BBh
eXIT from case or control structure
Код операции:                   1 байт          0BBh
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Выход  в  точку  в коде, помеченную при входе в структуру
управления (ENTC или ENTS). Уменьшает на единицу адрес вершины
П-стека и устанавливает PC на вершине П-стека.

В терминах Модулы-2:
     DEC(S); PC:=Core[S]

@wENTS@W                            0BCh
ENTer control Structure
Код операции:                   1 байт
Непосредственные операнды:      2 байта
Длина команды:                  3 байта
Действие:
     Если  S-регистр,  увеличенный  на  1,  превышает  границу
П-стека,  PC  возвращается  на  1  и возбуждается прерывание с
номером 40.
     Иначе  запоминается  PC,  увеличенный на столько, сколько
указано  в  двух  следующих  байтах кода, то есть запоминается
точка в коде, куда выходить из управляющей стректуры.

В терминах Модулы-2:
     IF S+1>H THEN DEC(PC); TRAP(40h)
     ELSE Core[S]:=Next2()+PC; INC(S) END

@wORJP@W                            0BEh
short circuit OR JumP
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Если  значение, взятое со стека, не равно нулю, кладет на
стек  единицу,  изменяет  PC  на  столько,  сколько  указано в
следующем  байте  кода; иначе увеличивает PC на единицу. Таким
образом,  в  этом  случае  PC  в  процессе  выполнения команды
увеличивается на два.

В терминах Модулы-2:
     IF Pop()#0 THEN Push(1); PC:=Next()+PC
     ELSE INC(PC) END

@wANDJP@W                           0BFh
short circuit AND JumP
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Если  значение,  взятое  со  стека, равно нулю, кладет на
стек ноль, изменяет PC на столько, сколько указано в следующем
байте  кода; иначе увеличивает PC на единицу. В этом случае PC
в процессе выполнения команды увеличивается на два.

В терминах Модулы-2:
     IF Pop()=0 THEN Push(0); PC:=Next()+PC
     ELSE INC(PC) END

@wMOVE@W                            0C0h
MOVE block
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Со  стека берется размер куска, который будет передвинут,
затем  адрес, начиная с которого двигать, затем адрес, начиная
с которого писать этот кусок.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     sz:=Pop();
     i:=Pop(); j:=Pop();
     WHILE sz>0 DO
       Core[j]:=Core[i]; INC(i); INC(j); DEC(sz)
     END

@wRDS@W                             0C1h
ReaD String
Код операции:                   1 байт
Непосредственные операнды:      sz*4+1 байт
Длина команды:                  sz*4+2 байт
Действие:
     PC  продвигается  на  1  вперед, из следующего байта кода
берется  размер  строки.  Если  он  больше  32  (20h),  то  PC
уменьшается  на  2  (и, следовательно, в результате выполнения
команды  остается на месте); возбуждается прерывание с номером
4Bh. Иначе со стека берется адрес в памяти, начиная с которого
пишется  слово  за  словом  строка.  Слова берутся из сегмента
кода,  пока  не исчерпается размер. PC каждый раз продвигается
на 4 вперед.. Таким образом, в результате выполнения команды PC
продвигается вперед на 4*size+2 байт.

В терминах Модулы-2:
     sz:=Next();
     IF sz>20h THEN DEC(PC,2); TRAP(4Bh)
     ELSE adr:=Pop();
       WHILE sz>0 DO Core[adr]:=Next4(); INC(adr); DEC(sz) END
     END

@wLSTA@W                            0C2h
Load STring Address
Код операции:                   1 байт
Непосредственные операнды:      2 байта
Длина команды:                  3 байта
Действие:
     Грузит  на  стек  адрес  строки, взятый из следующих двух
байтов кода относительно начала области глобальных данных.
     PC продвигается на 3 вперед.

В терминах Модулы-2:
     Push(Core[G+1]+Next2());

@wCOMP@W                            0C3h
COMPare strings
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со стека словные адреса двух строк, преобразует их
в  байтовые, и вытаскивает из памяти по два символа, начиная с
указанных  адресов,  либо до тех пор, пока один из символов не
окажется  0c,  либо  до тех пор, пока они не окажутся разными.
Тогда  на стек загружается последний вытащенный символ сначала
первой, затем второй строки.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop()*4; j:=Pop()*4;
     REPEAT a:=CHAR(ByteCore[i]); b:=CHAR(ByteCore[j]);
     INC(i); INC(j)
     UNTIL (a=0c) OR (b=0c) OR (a#b); Push(a); Push(b)

@wGB@W                              0C4h
Get procedure Base n level down
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байт
Действие:
     Узнает  и грузит на стек начало сегмента локальных данных
с помощью последовательных разыменований (т.е. восстанавливает
динамическую  цепочку)  на  столько  уровней вызовов локальных
процедур, сколько указано в следующем байте сегмента кода.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     i:=L; k:=Next();
     WHILE k>0 DO i:=Core[i]; DEC(k) END; Push(i)

@wGB1@W                             0C5h
Get procedure Base 1 level down
Код операции:                             1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет   из  памяти  и  грузит  на  стек  начало  сегмента
локальных данных.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(Core[L])

@wCHK@W                             0C6h
range bounds CHecK
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со стека два  значения,  которые рассматривает как
верхнюю  и  нижнюю  границу  соответственно;  берет  и  грузит
обратно  следующий  элемент  стека, чтобы узнать его значение;
если оно не лежит в пределах границ, кладет границы обратно на
стек и возбуждает прерывание 4Ah.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     hi:=Pop(); low:=Pop(); i:=Pop(); Push(i);
     IF (i<low) OR (i>hi) THEN
       Push(low); Push(hi); TRAP(4Ah)
     END

@wCHKZ@W                            0C7h
array bounds CHecK (low=Zero)
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет   со  стека  значение,  которое  рассматривает  как
верхнюю  границу; в качестве нижней границы рассматривается 0.
Берет  и  грузит обратно следующий элемент стека, чтобы узнать
его  значение;  если  оно  не  лежит в пределах границ, кладет
верхнюю границу обратно на стек и возбуждает прерывание 4Ah.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     hi:=Pop(); i:=Pop(); Push(i);
     IF (i<0) OR (i>hi) THEN Push(hi); TRAP(4Ah) END

@wALLOC@W                           0C8h
ALLOCate block
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со  стека  размер  отводимой памяти в словах. Если
S-регистр,  увеличенный  на размер, превышает границу П-стека,
размер  грузится  обратно  на  стек,  PC  возвращается  на 1 и
возбужда.ется прерывание с номером 40.
     Иначе   на  стек  грузится  текущее  значение  S-регистра
(начало  отводимой памяти), на П-стеке S-регистр передвигается
на столько слов вперед, каков размер отведенной памяти.
     В этом случае PC продвигается на 1 вперед.

В терминах Модулы-2:
     sz:=Pop();
     IF S+sz>H THEN  Push(sz); DEC(PC); TRAP(40h)
     ELSE Push(S); INC(S,sz) END

@wENTR@W                            0C9h
ENTeR procedure
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Берет  из  следующего  байта кода размер памяти в словах.
Если  S-регистр,  увеличенный  на  размер,  превышает  границу
П-стека,   PC  возвращается  в  исходное  положение  (то  есть
сдвигается  назад  на  2  байта)  и  возбуждается прерывание с
номером 40.
     Иначе  продвигает  S-регистр  на  -размер- слов вперед. В
этом случае в результате выполнения команды PC продвигается на
2 вперед.

В терминах Модулы-2:
     sz:=Next();
     IF S+sz>H THEN DEC(PC,2); TRAP(40h)
     ELSE INC(S,sz) END

@wRTN@W                             0CAh
ReTurN from procedure
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Восстанавливаются значение S-регистра до вызова процедуры
(т.е.  освобождается  память,  занятая в результате выполнения
процедуры),  значение  L-регистра  процедуры,  из которой была
вызвана  данная  процедура,  значение  PC  и,  если вызывалась
процедура  из  внешнего модуля, восстанавливается указатель на
область  глобальных  данных  исполняемого  модуля  и  по  нему
F-регистр. Если в процессе выполнения процедуры менялась маска
прерываний, то восстанавливается маска до вызова процедуры.

В терминах Модулы-2:
     S:=L; L:=Core[S+1]; PC:=WORD(BITSET(Core[S+2])*{0..0Fh});
     IF ExternalBit IN BITSET(Core[S+2]) THEN
       (* external called *)
       G:=Core[S]; F:=CodePtr(Core[G])
     END;
     IF ChangeMaskBit IN BITSET(Core[S+2]) THEN
       (* mask was changed *)
       M:=BITSET(Core[S+3])*{0..10h}
     END;

@wNOP@W                             0CBh
No OPeration
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     При вызове этой команды ничего не делается.
     PC продвигается на 1 вперед.

@wCX@W                              0CCh
Call eXternal
Код операции:                   1 байт
Непосредственные операнды:      2 байта
Длина команды:                  3 байта
Действие:
Вызов внешней процедуры.
     Если  значение  S-регистра, увеличенное на 4, превосходит
границу  П-стека,  то  PC  возвращается  назад  и возбуждается
прерывание с номером 40h.
     Иначе  по  номеру,  взятому  из  следующего  байта  кода,
вычисляется  указатель  (в глобальной DFT) на адрес глобальных
данных  модуля, которому принадлежит вызванная процедура, а из
следующего   байта   кода   берется   ее  номер.  После  этого
производится  разметка П-стека для вызова процедуры, то есть в
нулевое  слово области локальных данных заносится указатель на
область глобальных данных основного модуля (начало статической
цепочки),  в  первое  слово  -  указатель на область локальных
данных  той  процедуры, из которой произошел вызов (помечается
динамическая  цепочка),  во  второе  слово - PC точки вызова с
пометкой  о  том,  что  вызов  был  внешним  (для последующего
восстановления   PC).  Затем  по  указателю  восстанавливается
G-регистр   внешнего   модуля,   по   нему   -  F-регистр,  PC
устанавливается на начало вызванной процедуры.

В терминах Модулы-2:
     IF S+4<=H THEN j:=Core[G-Next()-1]; (* big DFT *)
       i:=Next(); Mark(G,TRUE);
       G:=Core[j]; F:=CodePtr(Core[G]); PC:=GetPc(i);
     ELSE DEC(PC); TRAP(40h) END

@wCI@W                              0CDh
Call procedure at Intermediate level
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Если  значение  S-регистра, увеличенное на 4, превосходит.
границу  П-стека,  то  PC  возвращается  назад  и возбуждается
прерывание с номером 40h.
     Иначе  из  следующего байта кода берется номер вызываемой
процедуры, после чего производится разметка П-стека для вызова
процедуры,  то  есть  в нулевое слово области локальных данных
заносится  слово,  взятое  со  стека  (например,  указатель на
область  локальных данных процедуры, статически объемлющей ту,
из  которой  происходит  вызов,  для  обеспечения доступа к ее
локальным  данным  - помечается статическая цепочка), в первое
слово  -  указатель на область локальных данных той процедуры,
из  которой произошел вызов (помечается динамическая цепочка),
во   второе   слово   -  PC  точки  вызова  (для  последующего
восстановления   PC).   Затем  PC  устанавливается  на  начало
вызванной процедуры.

В терминах Модулы-2:
     IF S+4<=H THEN
       i:=Next(); Mark(Pop(),FALSE); PC:=GetPc(i);
     ELSE DEC(PC); TRAP(40h) END

@wCF@W                              0CEh
Call Formal procedure
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Если  значение  S-регистра, увеличенное на 3, превосходит
границу  П-стека,  то  PC  возвращается  назад  и возбуждается
прерывание с номером 40h.
     Иначе   с   вершины  П-стека  берется  слово,  в  котором
содержится  процедурное  значение  вызываемой процедуры, после
чего  производится  разметка  П-стека для вызова процедуры, то
есть  в  нулевое  слово  области  локальных  данных  заносится
указатель  на  область  глобальных  данных   основного  модуля
(помечается  статическая  цепочка), в первое слово - указатель
на   область   локальных  данных  той  процедуры,  из  которой
произошел  вызов  (помечается динамическая цепочка), во второе
слово  -  PC  точки  вызова  с  пометкой  о том, что вызов был
внешним,   поскольку   формальная  процедура  может  быть  как
локальной, так и внешней (для последующего восстановления PC).
Затем   PC  устанавливается  на  начало  вызванной  процедуры.
Старший  бит  процедурного значения интерпретируется как номер
процедуры,  три младшие - как адрес входа в глобальную DFT. По
этому  адресу  вычисляется  адрес  глобальных данных модуля, в
котором  содержится вызываемая процедура, по нему - F-регистр.
PC устанавливается на начало процедуры.

В терминах Модулы-2:
     IF S+3<=H THEN i:=Core[S-1]; DEC(S); Mark(G,TRUE);
       k:=i DIV 1000000h; i:=i MOD 1000000h;
       G:=Core[i]; F:=CodePtr(Core[G]); PC:=GetPc(k);
     ELSE DEC(PC); TRAP(40h) END

@wCL@W                              0CFh
Call Local procedure
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Если  значение S-регистра, увеличенное на 4, не превышает
границы   П-стека,   берет  из  следующего  байта  кода  номер
процедуры,  затем  производится  разметка  П-стека  для вызова
локальной  процедуры:  в  переменную  i  запоминается значение
S-регистра,  на  П-стек  кладется дважды значение L-регистра и
текущее  значение  PC,  после чего S-регистр продвигается на 2
вперед, а L-регистр устанавливается на запомненном значении S.
PC устанавливается на начале процедуры, номер которой был взят
из кода.
     Иначе   PC   возвращается   назад  на  1  и  возбуждается
прерывание с номером 40h.

В терминах Модулы-2:
     IF S+4<=H THEN i:=Next(); Mark(L,FALSE); PC:=GetPc(i);
     ELSE DEC(PC); TRAP(40h) END

@wCL0@W..@wCL0E@W                       0D0h..0DFh
Call Local procedure
Код операции:                   4 бита          0Dh
Непосредственные операнды:      4 бита          0h..0Fh
Длина команды:                  1 байт
Действие:
     Если  значение S-регистра, увеличенное на 4, не превышает
границы   П-стека,   берет  из  следующего  байта  кода  номер
процедуры,  затем  производится  разметка  П-стека  для вызова
локальной  процедуры:  в  переменную  i  запоминается значение
S-регистра,  на  П-стек  кладется дважды значение L-регистра и
текущее  значение  PC,  после чего S-регистр продвигается на 2
вперед, а L-.регистр устанавливается на запомненном значении S.
PC устанавливается на начале процедуры, номер которой указан в
последних четырех битах команды.
     Иначе   PC   возвращается   назад  на  1  и  возбуждается
прерывание с номером 40h.

В терминах Модулы-2:
     IF S+4<=H THEN Mark(L,FALSE); PC:=GetPc(IR MOD 10h);
     ELSE DEC(PC); TRAP(40h) END

@wINCL@W                            0E0h
INCLude in set
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Если  значение,  взятое со стека, меньше 0 или больше 31,
то  оно  грузится  обратно  на  стек,  PC  возвращается назад,
возбуждается прерывание с номером 4Ah.
     Иначе  со стека берется адрес битсета и в указанном месте
выставляется  единица. Полученный битсет записывается в память
на прежнее место. PC продвинут на 1 вперед.

В терминах Модулы-2:
     i:=Pop();
     IF (i<0) OR (i>1Fh) THEN Push(i); DEC(PC); TRAP(4Ah)
     ELSE j:=Pop(); w:=BITSET(Core[j]); INCL(w,i);
       Core[j]:=CARDINAL(w)
     END

@wEXCL@W                            0E1h
EXCLude from set
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Если  значение,  взятое со стека, меньше 0 или больше 31,
то  оно  грузится  обратно  на  стек,  PC  возвращается назад,
возбуждается прерывание с номером 4Ah.
     Иначе  со стека берется адрес битсета и в указанном месте
выставляется  0.  Полученный  битсет  записывается в память на
прежнее место. PC продвинут на 1 вперед.

В терминах Модулы-2:
     i:=Pop();
     IF (i<0) OR (i>1Fh) THEN Push(i); DEC(PC); TRAP(4Ah)
     ELSE j:=Pop(); w:=BITSET(Core[j]); EXCL(w,i);
       Core[j]:=CARDINAL(w)
     END

@wSLEQ@W                            0E2h
bitSet Less or EQual
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Со стека берутся два слова, интерпретируются как битсеты.
Если  нижний  меньше  или равен верхнему (то есть все элементы
нижнего   являются  элементами  верхнего),  на  стек  грузится
единица, иначе ноль.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     w:=BITSET(Pop()); v:=BITSET(Pop()); Push(v<=w)

@wSGEQ@W                            0E3h
bitSet Greater or EQual
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Со стека берутся два слова, интерпретируются как битсеты.
Если  нижний  больше  или равен верхнему (то есть все элементы
верхнего   являются  элементами  нижнего),  на  стек  грузится
единица, иначе ноль.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     w:=BITSET(Pop()); v:=BITSET(Pop()); Push(v>=w)

@wINC@W1                            0E4h
INCreament by 1
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Увеличивает  на  единицу  значение, лежащее на П-стеке по
адресу, взятому со стека.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     INC(Core[Pop()])

@wDEC@W1                            0E5h
DECreament by 1
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Уменьшает  на  единицу  значение,  лежащее  на П-стеке по
адресу, взятому со стека.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     DEC(Core[Pop()])

@wINC@W                             0E6h
INCreament
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет  со  стека  целое  число,  и  значение,  лежащее на
П-стеке по адресу, взятому со стека, увеличивает на это число.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); INC(Core[Pop()],i)

@wDEC@W                             0E7h
DECreament
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 бай.т
Действие:
     Берет  со  стека  целое  число,  и  значение,  лежащее на
П-стеке по адресу, взятому со стека, уменьшает на это число.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); DEC(Core[Pop()],i)

@wSTOT@W                            0E8h
STOre Top on procedure stack
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Если  значение  S-регистра,  увеличенное  на 1, превышает
границы  П-стека,  PC  возвращается  назад  на 1, возбуждается
прерывание с номером 40h.
     Иначе  значение  с вершины стека выражений выгружается на
П-стек.
     PC продвинут на 1 вперед.

В терминах Модулы-2:
     IF S+1>H THEN DEC(PC); TRAP(40h)
     ELSE Core[S]:=Pop(); INC(S)
     END

@wLODT@W                            0E9h
LOaD Top of procedure stack
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Значение  с вершины П-стека выражений загружается на стек
выражений.
     PC продвинут на 1 вперед.

В терминах Модулы-2:
     DEC(S); Push(Core[S])

@wLXA@W                             0EAh
Load indeXed Address
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     По  взятым  со  стека размеру элемента, номеру элемента и
адресу  структуры (например, массива) вычисляет адрес элемента
и кладет его на стек.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     sz:=Pop(); i:=Pop(); adr:=Pop(); Push(adr+i*sz)

@wLPC@W                             0EBh
Load Procedure Constant
Код операции:                   1 байт
Непосредственные операнды:      2 байта
Длина команды:                  3 байта
Действие:
     Из  следующего за байтом команды байта кода берется номер
модуля  в  локальной  DFT,  затем  из  следующего  байта номер
процедуры.  Номера  упаковываются следующим образом: в старший
байт кладется номер процедуры, в младшие три - адрес локальной
DFT  модуля  с указанным номером. Полученное слово грузится на
стек.
     PC продвигается на 3 вперед.

В терминах Модулы-2:
     i:=Next(); j:=Next(); Push(j*1000000h+Core[G-i-1])

@wBBU@W                             0ECh
Bit Block Unpack
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Со стека берется размер битовой вырезки. Если он меньше 1
или  больше  32,  он кладется обратно на стек, PC возвращается
назад и возбуждается прерывание с номером 4Ah.
     Иначе  формируется  битовая  вырезка  указанного размера,
начинающаяся со словного адреса, взятого со стека, и с битовым
смещением, взятым со стека. Вырезка грузится на стек.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     sz:=Pop();
     IF (sz<1) OR (sz>32) THEN
       Push(sz); DEC(PC); TRAP(4Ah)
     END;
     i:=Pop(); adr:=Pop();
     (* j:=битовая вырезка длиной sz, начиная с
        битового адреса (adr,i)
     *)
     Push(j);

@wBBP@W                             0EDh
Bit Block Pack
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Со стека берется битовая вырезка и число. Если оно меньше
1  или больше 32, то кладется обратно на стек, PC возвращается
назад и возбуждается прерывание с номером 4Ah.
     Иначе  упаковывает  указанное число младших битов вырезки
по  словному  адресу, взятому со стека, и с битовым смещением,
взятым со стека.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     j:=Pop(); sz:=Pop();
     IF (sz<1) OR (sz>32) THEN
       Push(sz); DEC(PC); TRAP(4Ah)
     END;
     i:=Pop(); adr:=Pop();

@wBBLT@W                            0EEh
Bit BLock Transfer
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Со  стека  берутся размер пересылаемого куска (может быть
больше  32),  битовое  смещение  и словный адрес пересылаемого
куска,  битовое  смещение  и.  словный адрес, куда пересылается
кусок, и производится пересылка.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     sz:=Pop(); (* Длина может быть больше 32 *)
     i:=Pop(); adr:=Pop();
     j:=Pop(); adr1:=Pop();

@wSWAP@W                            0F0h
SWAP
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Меняет местами два верхних элемента стека.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); j:=Pop(); Push(i); Push(j)

@wLPA@W                             0F1h
Load Parameter Address
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Грузит  на  стек  адрес  локального  параметра с номером,
взятым из следующего байта сегмента кода.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Push(L-Next()-1);

@wLPW@W                             0F2h
Load Parameter Word
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Грузит  на  стек  локальный параметр с номером, взятым из
следующего байта сегмента кода.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Push(Core[L-Next()-1]);

@wSPW@W                             0F3h
Store Parameter Word
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Берет  со  стека  и выгружает в память локальный параметр с
номером, взятым из следующего байта сегмента кода.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     Core[L-Next()-1]:=Pop();

@wSSWU@W                            0F4h
Store Stack Word Undistractive
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Берет со стека слово и записывает его в память по адресу,
взятому со стека, после чего снова загружает его на стек.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     i:=Pop(); Core[Pop()]:=i; Push(i)


     0F5h,  0F6h, 0F7h, 0F8h, 0F9h - команд с такимим номерами
в системе команд нет.

@wACTIV@W                           0FAh
ACTIVe process
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     Загружает на стек адрес дескриптора активного процесса.
     PC продвигается на 1 вперед.

В терминах Модулы-2:
     Push(P)

@wUSR@W                             0FBh
USeR defined functions
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Берет   следующий   байт   кода   и  выполняет  действия,
определяемые пользователем.

В терминах Модулы-2:
     i:=Next(); (*  *)

@wSYS@W                             0FCh
SYStem rarely functions
Код операции:                   1 байт
Непосредственные операнды:      1 байт
Длина команды:                  2 байта
Действие:
     Если  в  следующем  байте кода лежит 0, то грузит на стек
слово,    идентифицирующее   процессор.   Иначе   возбуждается
прерывание с номером 7h.
     PC продвигается на 2 вперед.

В терминах Модулы-2:
     CASE Next() OF
       |00h: (* PID Processor IDent *)
             (* Push(PID) *)
     (* Остальные могут быть различными в разных моделях *)
     ELSE TRAP(7h)
     END;

@wNII@W                             0FDh
Never Implemented Instruction
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     При вызове этой команды возбуждается прерывание с номером
7h. PC продвигается на 1 вперед.

В терминах Модулы-2:
     TRAP(7h);

@wINVLD@W                           0FFh
INVaLiD command
Код операции:                   1 байт
Непосредственные операнды:      0 байт
Длина команды:                  1 байт
Действие:
     При вызове этой команды возбуждается прерывание с номером
49h. PC продвигается на 1 вперед.

В терминах Модулы-2:
     TRAP(49h)
2317
