:DOT    = 0402
        [ bus_A=STACK->Etop FLAG=ZERO FINISH ][F]
:NII    [ CONST->R1 D=7 ][ GOTO ADR=TRAPED ]
:SYS    [ UPDATE_CASH   ][ GOTO ADR=SYS_1 ]
:USR    [ CONST->R1 D=7 ][ GOTO ADR=TRAPED ]
:ACTIV  [ bus_A=Etop->STACK ][ ALU=A bus_A=P bus_B=WR_Etop FINISH ]
:BMG    [ UPDATE_CASH   ] [ GOTO ADR=GRAPHIC ]
:CHKBX  [ bus_A=STACK->R1 GOTO ADR=BOX_CHK ] [F]
:CM     [ UPDATE_CASH   ] [ GOTO ADR=CM_1 ]
:RCHKZ  [ ALU=A bus_A=Etop bus_B=WR_R1 FLAG=N GOTO ADR=RCHKZ_1 ] [F]
:RCHK   [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->R2 GOTO ADR=RCHK_1 ]
:SSWU   [ bus_A=STACK->R1 ALU=A WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D FINISH ]
:SPW    [ UPDATE_CASH ]
        [ GOTO ADR=SPW_1 ]
:LPW    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A bus_A=L bus_B=WR_Etop GOTO ADR=LPW_1 ]
:LPA    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A bus_A=L bus_B=WR_Etop GOTO ADR=LPA_1 ]
:SWAP   [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->Etop GOTO ADR=SWAP_1 ]
:PDX    [ ALU=A    bus_A=Etop   FLAG=N ]
        [ bus_A=STACK->R1       GOTO ADR=PDX_1 ]
:BBLT   [ GOTO ADR=BBLT_1  ][F]
:BBP    [ GOTO ADR=BPK_1   ][F]
:BBU    [ GOTO ADR=UNBPK_1 ][F]
:LPC    [ UPDATE_CASH ] [ bus_A=Etop->STACK GOTO ADR=LPC_1 ]
:LXA    [ bus_A=STACK->R1 CALL ADR=IMUL ]
        [ ALU=A+B bus_A=STACK->Etop bus_B=Etop FLAG=ZERO FINISH ]
:LODT   [ ALU=A-1 bus_A=RW_S RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:STOT   [ CONST->R2 D=1 ][ ALU=A bus_A=Etop bus_B=WR_R1 GOTO ADR=STOT_1 ]
:DEC    [ ALU=A bus_A=Etop bus_B=WR_R2 ]
        [ bus_A=STACK->Etop GOTO ADR=DEC_1 ALU=A RD_MEM_A ]
:INC    [ ALU=A bus_A=Etop bus_B=WR_R2 ]
        [ bus_A=STACK->Etop GOTO ADR=INC_1 ALU=A RD_MEM_A ]
:DEC1   [ CONST->R2 D=1 ]
        [ bus_B=Etop        GOTO ADR=DEC_1 RD_MEM_A ]
:INC1   [ CONST->R2 D=1 ]
        [ bus_B=Etop        GOTO ADR=INC_1 RD_MEM_A ]
:QUOT   [ GOTO ADR=QUOT_1 ][F]
:INL    [ GOTO ADR=INL_1 ][F]
:EXCL   [ bus_A=STACK->R1 GOTO ADR=EXCL_1 ][F]
:INCL   [ bus_A=STACK->R1 GOTO ADR=INCL_1 ][F]
:CL0F   [ CONST->R5 D=0F ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL0E   [ CONST->R5 D=0E ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL0D   [ CONST->R5 D=0D ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL0C   [ CONST->R5 D=0C ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL0B   [ CONST->R5 D=0B ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL0A   [ CONST->R5 D=0A ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL9    [ CONST->R5 D=09 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL8    [ CONST->R5 D=08 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL7    [ CONST->R5 D=07 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL6    [ CONST->R5 D=06 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL5    [ CONST->R5 D=05 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL4    [ CONST->R5 D=04 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL3    [ CONST->R5 D=03 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL2    [ CONST->R5 D=02 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL1    [ CONST->R5 D=01 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL0    [ CONST->R5 D=00 ]
        [ ALU=A bus_A=L bus_B=WR_R1 FLAG=ZERO GOTO ADR=MARK ]
:CL     [ UPDATE_CASH     ] [ GOTO ADR=CL_2  ]
:CF     [ GOTO ADR=CF_1   ] [F]
:CI     [ UPDATE_CASH     ] [ GOTO ADR=CI_1  ]
:CX     [ UPDATE_CASH     ] [ GOTO ADR=CX_1  ]
:NOP    [ FLAG=ZERO FINISH  ][F]
:RTN    [ ALU=ROR(B) CONST->R1 D=1 ]
        [ ALU=A bus_A=L bus_B=WR_S GOTO ADR=RTN_1 ]
:ENTR   [ UPDATE_CASH ][ GOTO ADR=ENTR_1   ]
:ALLOC  [ ALU=A bus_A=Etop bus_B=WR_R2 CALL ADR=CHECK_H ]
        [ ALU=A bus_A=Etop bus_B=WR_R2 GOTO ADR=ALLOC_1 ]
:CHKZ   [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ ALU=A FLAG=N bus_A=STACK->Etop GOTO ADR=CHKZ_1 ]
:CHK    [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->R2 GOTO ADR=CHK_1 ]
:GB1    [ bus_A=Etop->STACK bus_B=L RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:GB     [ UPDATE_CASH bus_A=Etop->STACK ]
        [ ALU=A bus_A=L bus_B=WR_Etop GOTO ADR=GB_1 ]
:COMP   [ ALU=B bus_A=WR_R1 CONST->R5 D=0   ]
        [ bus_A=STACK->R4   GOTO ADR=COMP_1 ]
:LSTA   [ UPDATE_CASH ][ GOTO ADR=LSTA_1 ]
:CHKNIL [ ALU=ROR(NE(B)) CONST->R1 D=0FF ]
        [ ALU=A-B        bus_A=R1 bus_B=Etop FLAG=Z FINISH ]
:MOVE   [ bus_A=STACK->R1 ]
        [ bus_A=STACK->R2 GOTO ADR=MOVE_1 ]
:ANDJP  [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=ANDJP_1 ][F]
:ORJP   [ ALU=A bus_A=Etop FLAG=Z ] [ FLAG=NEG(FLAG) GOTO ADR=ANDJP_1 ]
:JMP    [ ALU=A      bus_A=Etop bus_B=WR_PC CALL ADR=PUT_PC ]
        [ FLAG=ZERO  bus_A=STACK->Etop  FINISH ]
:ADDPC  [ ALU=A        bus_A=PC    bus_B=WR_R1 ]
        [ ALU=ASL(A-B) bus_A=RW_R1 bus_B=F     GOTO ADR=ADDPC_1 ]
:XIT    [ ALU=A-1 bus_A=RW_S RD_MEM_A GOTO ADR=XIT_1 ][F]
:ENTC   [ GOTO ADR=NII ][F]
:FOR2   [ GOTO ADR=NII ][F]
:FOR1   [ GOTO ADR=NII ][F]

:PCOP   [ ALU=A+1 bus_A=Etop bus_B=WR_R2 CALL ADR=CHECK_H ]
        [ bus_A=STACK->R1 GOTO ADR=PCOP_1 ]
:CPCOP  [ ALU=A+B bus_A=Etop CONST->R1 D=4 ]
        [ GOTO ADR=CPCOP_1 ]
:COPT   [ bus_A=Etop->STACK FINISH ][F]
:STOFV  [ CONST->R2 D=0F ][ GOTO ADR=STOFV_1 ]
:STORE  [ CONST->R2 D=0F ][ GOTO ADR=STORE_1 ]
:LODFV  [ ALU=A bus_A=Etop bus_B=WR_R4 ][ bus_A=STACK->Etop GOTO ADR=LODFV_1 ]
:DROP   [ bus_A=STACK->Etop FINISH ][F]
:DECS   [ ALU=NEG(A) bus_A=Etop bus_B=WR_R2 CALL ADR=CHECK_H ]
        [ ALU=A-B bus_A=RW_S bus_B=Etop GOTO ADR=DECS_1 ]
:MOD    [ bus_A=STACK->R1 CALL ADR=IDIV ]
        [ ALU=A bus_A=R1 bus_B=WR_Etop FINISH ]
:NOT    [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=BOOLEAN ][F]
:BIT    [ CALL ADR=BIT_S ][ GOTO ADR=BIT_1 ]
:IN     [ ALU=A bus_A=Etop bus_B=WR_R4 ]
        [ bus_A=STACK->Etop GOTO ADR=IN_1 ]
:BIC    [ ALU=A_BIC_B bus_A=STACK->Etop bus_B=Etop FINISH ][F]
:XOR    [ ALU=A_XOR_B bus_A=STACK->Etop bus_B=Etop FINISH ][F]
:AND    [ ALU=A_AND_B bus_A=STACK->Etop bus_B=Etop FINISH ][F]
:OR     [ ALU=A_OR_B  bus_A=STACK->Etop bus_B=Etop FINISH ][F]
:NEG    [ ALU=NEG(A) bus_A=RW_Etop FLAG=OVR FINISH ][F]
:ABS    [ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY GOTO ADR=ABS_1 ][F]
:NEQ    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=Z ]
:NEQ_1  [ FLAG=NEG(FLAG) GOTO ADR=BOOLEAN ]
:EQU    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=Z GOTO ADR=BOOLEAN ][F]
:GEQ    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=OVR GOTO ADR=GEQ_1 ][F]
:GTR    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=OVR GOTO ADR=GTR_1 ][F]
:LEQ    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=OVR GOTO ADR=LEQ_1 ][F]
:LSS    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=OVR GOTO ADR=LSS_1 ][F]
:FFCT   [ CALL ADR=FFCT_SUB ] [ FLAG=ZERO FINISH ]
:FNEG   [ CALL ADR=FNEG_SUB ] [ FLAG=ZERO FINISH ]
:FABS   [ CALL ADR=FABS_SUB ] [ FLAG=ZERO FINISH ]
:FCMP   [ bus_A=STACK->R1 GOTO ADR=FCMP_SUB ] [F]
:FDIV   [ CALL ADR=FDIV_SUB ] [ FLAG=ZERO FINISH ]
:FMUL   [ CALL ADR=FMUL_SUB ] [ FLAG=ZERO FINISH ]
:FSUB   [ CALL ADR=FSUB_SUB ] [ FLAG=ZERO FINISH ]
:FADD   [ CALL ADR=FADD_SUB ] [ FLAG=ZERO FINISH ]
:BM     [ GOTO ADR=NII ] [F]
:WM     [ GOTO ADR=NII ] [F]
:ARR_CMP[ GOTO ADR=NII ] [F]
:PIO    [ GOTO ADR=NII ] [F]
:TRB    [ GOTO ADR=TRB_1 ][F]
:RES92  [ GOTO ADR=NII ] [F]
:RES91  [ CONST->R1 D=7 ][ GOTO ADR=TRAPED ]
:RES90  [ CONST->R1 D=7 ][ GOTO ADR=TRAPED ]
:ROR    [ ALU=A_AND_B bus_A=Etop CONST->R1 D=1F FLAG=Z ]
        [ bus_A=STACK->Etop GOTO ADR=ROR_1 ]
:ROL    [ ALU=A_AND_B bus_A=Etop CONST->R1 D=1F FLAG=Z ]
        [ bus_A=STACK->Etop GOTO ADR=ROL_1 ]
:SHR    [ ALU=A bus_A=Etop bus_B=WR_R1 FLAG=Z ]
        [ bus_A=STACK->Etop GOTO ADR=SHR_1 ]
:SHL    [ ALU=A bus_A=Etop bus_B=WR_R1 FLAG=Z ]
        [ bus_A=STACK->Etop GOTO ADR=SHL_1 ]
:DIV    [ bus_A=STACK->R1 CALL ADR=IDIV ] [ FINISH ]
:MUL    [ bus_A=STACK->R1 CALL ADR=IMUL ] [ FINISH ]
:SUB    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=OVR FINISH ][F]
:ADD    [ ALU=A+B bus_A=STACK->Etop bus_B=Etop FLAG=OVR FINISH ][F]
:IDLE   [ GO_IF_INT_REQ ADR=IDLE_1 ][ GOTO ADR=IDLE ]
:TR     [ ALU=B bus_A=WR_R2 bus_B=Etop RD_MEM_A ]
        [ bus_B=WR_Etop RD_LOCK  GOTO ADR=TR_1 ]
:TRA    [ ALU=A bus_A=Etop bus_B=WR_R1 ][ bus_A=STACK->R2 GOTO ADR=TRA_1 ]
:TRAP   [ ALU=A bus_A=Etop bus_B=WR_R1 ][ bus_A=STACK->Etop GOTO ADR=TRAPED ]
:SETM   [ ALU=B bus_B=Etop RESET_MP_ERR ]
        [ ALU=A bus_A=Etop bus_B=WR_M FLAG=ZERO GOTO ADR=DROP ]
:GETM   [ bus_A=Etop->STACK ][ ALU=A bus_A=M bus_B=WR_Etop FINISH ]
:QUIT   [ CONST->R4 D=0 ][ GOTO ADR=HALTED ]
:RESET  [ CONST->R1 D=7 ][ GOTO ADR=TRAPED ]
:SSW0F  [ ALU=A+B bus_A=STACK CONST D=0F WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW0E  [ ALU=A+B bus_A=STACK CONST D=0E WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW0D  [ ALU=A+B bus_A=STACK CONST D=0D WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW0C  [ ALU=A+B bus_A=STACK CONST D=0C WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW0B  [ ALU=A+B bus_A=STACK CONST D=0B WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW0A  [ ALU=A+B bus_A=STACK CONST D=0A WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW9   [ ALU=A+B bus_A=STACK CONST D=9  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW8   [ ALU=A+B bus_A=STACK CONST D=8  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW7   [ ALU=A+B bus_A=STACK CONST D=7  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW6   [ ALU=A+B bus_A=STACK CONST D=6  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW5   [ ALU=A+B bus_A=STACK CONST D=5  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW4   [ ALU=A+B bus_A=STACK CONST D=4  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW3   [ ALU=A+B bus_A=STACK CONST D=3  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW2   [ ALU=A+B bus_A=STACK CONST D=2  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW1   [ ALU=A+B bus_A=STACK CONST D=1  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW0   [ ALU=A+B bus_A=STACK CONST D=0  WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:LSW0F  [ ALU=A+B bus_A=Etop CONST D=0F RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW0E  [ ALU=A+B bus_A=Etop CONST D=0E RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW0D  [ ALU=A+B bus_A=Etop CONST D=0D RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW0C  [ ALU=A+B bus_A=Etop CONST D=0C RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW0B  [ ALU=A+B bus_A=Etop CONST D=0B RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW0A  [ ALU=A+B bus_A=Etop CONST D=0A RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW9   [ ALU=A+B bus_A=Etop CONST D=9 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW8   [ ALU=A+B bus_A=Etop CONST D=8 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW7   [ ALU=A+B bus_A=Etop CONST D=7 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW6   [ ALU=A+B bus_A=Etop CONST D=6 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW5   [ ALU=A+B bus_A=Etop CONST D=5 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW4   [ ALU=A+B bus_A=Etop CONST D=4 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW3   [ ALU=A+B bus_A=Etop CONST D=3 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW2   [ ALU=A+B bus_A=Etop CONST D=2 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW1   [ ALU=A+B bus_A=Etop CONST D=1 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW0   [ ALU=A+B bus_A=Etop CONST D=0 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:SGW0F  [ ALU=A+B bus_A=G CONST D=0F WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW0E  [ ALU=A+B bus_A=G CONST D=0E WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW0D  [ ALU=A+B bus_A=G CONST D=0D WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW0C  [ ALU=A+B bus_A=G CONST D=0C WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW0B  [ ALU=A+B bus_A=G CONST D=0B WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW0A  [ ALU=A+B bus_A=G CONST D=0A WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW9   [ ALU=A+B bus_A=G CONST D=09 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW8   [ ALU=A+B bus_A=G CONST D=08 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW7   [ ALU=A+B bus_A=G CONST D=07 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW6   [ ALU=A+B bus_A=G CONST D=06 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW5   [ ALU=A+B bus_A=G CONST D=05 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW4   [ ALU=A+B bus_A=G CONST D=04 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW3   [ ALU=A+B bus_A=G CONST D=03 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SGW2   [ ALU=A+B bus_A=G CONST D=02 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:SXW    [ bus_A=STACK->R1 ]
        [ ALU=A+B bus_A=STACK->R1 bus_B=R1 WR_MEM_A GOTO ADR=SXW_1 ]
:SXB    [ ALU=A_AND_B bus_A=Etop CONST->R6 D=0FF ]
        [ bus_A=STACK->Etop GOTO ADR=SXB_1 ]
:LGW0F  [ ALU=A+B bus_A=G CONST D=0F RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW0E  [ ALU=A+B bus_A=G CONST D=0E RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW0D  [ ALU=A+B bus_A=G CONST D=0D RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW0C  [ ALU=A+B bus_A=G CONST D=0C RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW0B  [ ALU=A+B bus_A=G CONST D=0B RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW0A  [ ALU=A+B bus_A=G CONST D=0A RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW9   [ ALU=A+B bus_A=G CONST D=09 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW8   [ ALU=A+B bus_A=G CONST D=08 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW7   [ ALU=A+B bus_A=G CONST D=07 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW6   [ ALU=A+B bus_A=G CONST D=06 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW5   [ ALU=A+B bus_A=G CONST D=05 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW4   [ ALU=A+B bus_A=G CONST D=04 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW3   [ ALU=A+B bus_A=G CONST D=03 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW2   [ ALU=A+B bus_A=G CONST D=02 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LXW    [ ALU=A+B bus_A=STACK->Etop bus_B=Etop RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LXB    [ ALU=A_AND_B bus_A=Etop    CONST->R1 D=3 FLAG=Z ]
        [ ALU=ASR(A)  bus_A=RW_Etop GOTO ADR=LXB_1 ]
:SLW0F  [ ALU=A+B bus_A=L CONST D=0F WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW0E  [ ALU=A+B bus_A=L CONST D=0E WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW0D  [ ALU=A+B bus_A=L CONST D=0D WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW0C  [ ALU=A+B bus_A=L CONST D=0C WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW0B  [ ALU=A+B bus_A=L CONST D=0B WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW0A  [ ALU=A+B bus_A=L CONST D=0A WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW9   [ ALU=A+B bus_A=L CONST D=9 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW8   [ ALU=A+B bus_A=L CONST D=8 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW7   [ ALU=A+B bus_A=L CONST D=7 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW6   [ ALU=A+B bus_A=L CONST D=6 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW5   [ ALU=A+B bus_A=L CONST D=5 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SLW4   [ ALU=A+B bus_A=L CONST D=4 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:SSW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ bus_A=STACK->R1 GOTO ADR=SLW_1 ]
:SEW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ ALU=A bus_A=G bus_B=WR_R1 GOTO ADR=SEW_1 ]
:SGW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ ALU=A bus_A=G bus_B=WR_R1 GOTO ADR=SLW_1 ]
:SLW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ ALU=A bus_A=L bus_B=WR_R1 GOTO ADR=SLW_1 ]
:LLW0F  [ ALU=A+B bus_A=L CONST D=0F RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW0E  [ ALU=A+B bus_A=L CONST D=0E RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW0D  [ ALU=A+B bus_A=L CONST D=0D RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW0C  [ ALU=A+B bus_A=L CONST D=0C RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW0B  [ ALU=A+B bus_A=L CONST D=0B RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW0A  [ ALU=A+B bus_A=L CONST D=0A RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW9   [ ALU=A+B bus_A=L CONST D=9 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW8   [ ALU=A+B bus_A=L CONST D=8 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW7   [ ALU=A+B bus_A=L CONST D=7 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW6   [ ALU=A+B bus_A=L CONST D=6 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW5   [ ALU=A+B bus_A=L CONST D=5 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LLW4   [ ALU=A+B bus_A=L CONST D=4 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LSW    [ UPDATE_CASH ] [ GOTO ADR=LLW_1 ]
:LEW    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A bus_A=G bus_B=WR_Etop GOTO ADR=LEW_1 ]
:LGW    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A bus_A=G bus_B=WR_Etop GOTO ADR=LLW_1 ]
:LLW    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A bus_A=L bus_B=WR_Etop GOTO ADR=LLW_1 ]
:JBS    [ FLAG=NEG(FLAG) UPDATE_CASH ] [ GOTO ADR=JBS_1 ]
:JBSC   [ ALU=A bus_A=Etop FLAG=Z UPDATE_CASH ]
        [ bus_A=STACK->Etop GOTO ADR=JBS_1 ]
:JBL    [ FLAG=NEG(FLAG) UPDATE_CASH ] [ GOTO ADR=JBL_1 ]
:JBLC   [ ALU=A bus_A=Etop FLAG=Z UPDATE_CASH ]
        [ bus_A=STACK->Etop GOTO ADR=JBL_1 ]
:JFS    [ FLAG=NEG(FLAG) UPDATE_CASH ]
        [ GOTO ADR=JFS_1 ]
:JFSC   [ ALU=A bus_A=Etop FLAG=Z UPDATE_CASH ]
        [ bus_A=STACK->Etop GOTO ADR=JFS_1 ]
:JFL    [ FLAG=NEG(FLAG) UPDATE_CASH ] [ GOTO ADR=JFL_1 ]
:JFLC   [ ALU=A bus_A=Etop FLAG=Z UPDATE_CASH ]
        [ bus_A=STACK->Etop GOTO ADR=JFL_1 ]
:LEA    [ bus_A=Etop->STACK UPDATE_CASH ] [ GOTO ADR=LEA_1 ]
:LSA    [ UPDATE_CASH ] [ GOTO ADR=LLA_1 ]
:LGA    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A bus_A=G bus_B=WR_Etop GOTO ADR=LLA_1 ]
:LLA    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A bus_A=L bus_B=WR_Etop GOTO ADR=LLA_1 ]
:LIN    [ bus_A=Etop->STACK ALU=ROR(NE(B)) CONST->Etop D=0FF FINISH ][F]
:LIW    [ bus_A=Etop->STACK CALL ADR=NEXT4 ]
        [ ALU=A bus_A=R2 bus_B=WR_Etop FLAG=ZERO FINISH ]
:LID    [ UPDATE_CASH ] [ GOTO ADR=LID_1 ]
:LIB    [ UPDATE_CASH ] [ GOTO ADR=LIB_1 ]
:LI0F   [ bus_A=Etop->STACK CONST->Etop D=0F FINISH ][F]
:LI0E   [ bus_A=Etop->STACK CONST->Etop D=0E FINISH ][F]
:LI0D   [ bus_A=Etop->STACK CONST->Etop D=0D FINISH ][F]
:LI0C   [ bus_A=Etop->STACK CONST->Etop D=0C FINISH ][F]
:LI0B   [ bus_A=Etop->STACK CONST->Etop D=0B FINISH ][F]
:LI0A   [ bus_A=Etop->STACK CONST->Etop D=0A FINISH ][F]
:LI9    [ bus_A=Etop->STACK CONST->Etop D=9  FINISH ][F]
:LI8    [ bus_A=Etop->STACK CONST->Etop D=8  FINISH ][F]
:LI7    [ bus_A=Etop->STACK CONST->Etop D=7  FINISH ][F]
:LI6    [ bus_A=Etop->STACK CONST->Etop D=6  FINISH ][F]
:LI5    [ bus_A=Etop->STACK CONST->Etop D=5  FINISH ][F]
:LI4    [ bus_A=Etop->STACK CONST->Etop D=4  FINISH ][F]
:LI3    [ bus_A=Etop->STACK CONST->Etop D=3  FINISH ][F]
:LI2    [ bus_A=Etop->STACK CONST->Etop D=2  FINISH ][F]
:LI1    [ bus_A=Etop->STACK CONST->Etop D=1  FINISH ][F]
:LI0    [ bus_A=Etop->STACK CONST->Etop D=0  FINISH ][F]

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:LIB_1  [ bus_A=Etop->STACK bus_B=WR_Etop INC_PC ] [ FINISH ]
:LID_1  [ bus_A=Etop->STACK bus_B=WR_Etop INC_PC ] [ UPDATE_CASH ]
        [ bus_B=WR_R2 INC_PC ]
        [ CALL ADR=ROL(R2,8) ]
        [ ALU=A_OR_B bus_A=RW_Etop bus_B=R2 FINISH ]
:LLA_1  [ ALU=A+B bus_A=RW_Etop INC_PC ] [ FINISH ]
:LEA_1  [ ALU=A-B-1 bus_A=G INC_PC RD_MEM_A ]
        [ bus_B=WR_R1 RD_MEM_D UPDATE_CASH ]
        [ bus_B=R1 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D GOTO ADR=LLA_1 ]
:JFL_1  [ GO_FALSE ADR=SKIP2 ]
        [ bus_B=WR_R1 INC_PC ]
        [ UPDATE_CASH ] [ bus_B=WR_R2 INC_PC ] [ CALL ADR=ROL(R2,8) ]
        [ ALU=A_OR_B bus_A=RW_R1 bus_B=R2 ]
:JUMP % R1 - смещение
        [ ALU=A+B bus_A=RW_R1 RW_PC ]
        [ ALU=ASR(A) bus_A=RW_R1 ]
        [ ALU=ASR(A) bus_A=RW_R1    REG_EN ADR=NOP ]
        [ ALU=A+B bus_A=RW_R1 bus_B=RW_PC RD_MEM_A ]
        [ WR_CASH   RD_MEM_D GO_REG ] % ADR=NOP
%       [ FLAG=ZERO FINISH ] == NOP

:SKIP2[ INC_PC ][ UPDATE_CASH ][ INC_PC ][ FLAG=ZERO FINISH ]
:JFS_1[ bus_B=WR_R1 INC_PC ]
      [ GO_TRUE ADR=JUMP ]
      [ FINISH ]
:JBL_1[ GO_FALSE ADR=SKIP2 ]
      [ bus_B=WR_R1 INC_PC ]
      [ UPDATE_CASH ] [ bus_B=WR_R2 INC_PC ] [ CALL ADR=ROL(R2,8) ]
      [ ALU=A_OR_B bus_A=RW_R1 bus_B=R2 ]
      [ ALU=NEG(A) bus_A=RW_R1 GOTO ADR=JUMP ]
:JBS_1[ bus_B=WR_R1 INC_PC ]
      [ ALU=NEG(A) bus_A=RW_R1 GO_TRUE ADR=JUMP ]
      [ FINISH ]
:LEW_1[ ALU=A-B-1 bus_A=RW_Etop INC_PC RD_MEM_A ]
      [ bus_B=WR_Etop RD_MEM_D ]
      [ bus_B=Etop    RD_MEM_A ]
      [ bus_B=WR_Etop RD_MEM_D ]
      [ UPDATE_CASH ]
:LLW_1[ ALU=A+B bus_A=RW_Etop INC_PC RD_MEM_A ]
      [ bus_B=WR_Etop RD_MEM_D FINISH ]
:SEW_1[ ALU=A-B-1 bus_A=RW_R1 INC_PC RD_MEM_A ]
      [ bus_B=WR_R1 RD_MEM_D ]
      [ bus_B=R1    RD_MEM_A ]
      [ bus_B=WR_R1 RD_MEM_D ]
      [ UPDATE_CASH ]
:SLW_1[ ALU=A+B bus_A=RW_R1 INC_PC WR_MEM_A ]
      [ bus_A=STACK->Etop bus_B=R2 WR_MEM_D FINISH ]
:SLW_2[ bus_A=STACK->Etop FINISH ]

:LXB_1[ ALU=ASR(A)    bus_A=RW_Etop  REG_EN ADR=ROR(R2,8)        ]
      [ ALU=A+B       bus_B=Etop     RD_MEM_A  bus_A=STACK->Etop ]
      [               bus_B=WR_R2    RD_MEM_D  GO_TRUE ADR=LXB_2 ]

      [ ALU=A-B       bus_A=R1       FLAG=Z  CONST D=3 ]
      [ GO_TRUE       ADR=LXB_3
        ALU=A-1       bus_A=R1       FLAG=Z   ]
      [ CONST->Etop   D=0FF          CALL_REG ] % ADR=ROR(R2,8)
      [ CALL_FALSE    ADR=ROR(R2,8)           ]
      [ ALU=A_AND_B   bus_A=R2       bus_B=RW_Etop
        FLAG=ZERO FINISH ]

:LXB_3[ CALL        ADR=ROL(R2,8)   ]
:LXB_2[ ALU=A_AND_B bus_A=R2        CONST->Etop D=0FF ]
      [ FLAG=ZERO FINISH ]

:ROL(R6,7)
      [ ALU=ROL(A) bus_A=RW_R6 ]
      [ ALU=ROL(A) bus_A=RW_R6 ]
      [ ALU=ROL(A) bus_A=RW_R6 ]
      [ ALU=ROL(A) bus_A=RW_R6 ]
      [ ALU=ROL(A) bus_A=RW_R6 ]
      [ ALU=ROL(A) bus_A=RW_R6 ]
      [ ALU=ROL(A) bus_A=RW_R6 RETURN ]

:SXB_1[ ALU=A_AND_B bus_A=Etop CONST->R1 D=3 FLAG=Z ]
      [ CONST->R2 D=0FF ]
      [ ALU=ASR(A) bus_A=RW_Etop ]
      [ ALU=ASR(A) bus_A=RW_Etop ]
      [ ALU=A+B    bus_B=Etop   RD_MEM_A bus_A=STACK->Etop ]
      [            bus_B=WR_R5  RD_MEM_D GO_TRUE ADR=SXB_X ]
      [ ALU=A-B    bus_A=R1     FLAG=Z   CONST D=3 ]
      [ GO_TRUE ADR=SXB_3 ]

      [ CALL ADR=ROL(R6,7)      ALU=ROL(A) bus_A=RW_R6 ]
      [ CALL ADR=ROL(R2,8)      ALU=A-1    bus_A=RW_R1 FLAG=Z ]
      [ GO_TRUE ADR=SXB_X ]
      [ CALL ADR=ROL(R6,7)      ALU=ROL(A) bus_A=RW_R6 ]
      [ CALL ADR=ROL(R2,7)      ALU=ROL(A) bus_A=RW_R2 ]

:SXB_X[ ALU=A_BIC_B bus_A=RW_R5 bus_B=R2 ]
      [ ALU=A_OR_B  bus_A=RW_R5 bus_B=R6 ]
      [ bus_B=Etop  WR_MEM_A    ]
      [ bus_B=R5    WR_MEM_D    bus_A=STACK->Etop FLAG=ZERO FINISH ]

:SXB_3[ CALL ADR=ROR(R6,7)      ALU=ROR(A)  bus_A=RW_R6 ]
      [ CALL ADR=ROR(R2,7)      ALU=ROR(A)  bus_A=RW_R2 ]
      [ GOTO ADR=SXB_X ]

:SXW_1[ bus_B=Etop WR_MEM_D ]
      [ bus_A=STACK->Etop FINISH ]
:TRA_1[ bus_A=STACK->Etop GOTO ADR=TRANSFER ]
:TR_1 [ bus_B=R2  WR_MEM_A ]
      [ CONST D=0 WR_MEM_D ]
      [ FINISH ]
:IDLE_1[ CALL ADR=DEC_PC ]
      [ FLAG=ZERO FINISH ]
:ROR_1[ GO_TRUE ADR=ROR_2 ALU=A-1 bus_A=RW_R1 FLAG=Z ]
      [ ALU=ROR(A) bus_A=RW_Etop GO_FALSE ADR=ROR_1 ]
:ROR_2[ FLAG=ZERO FINISH ]
:ROL_1[ GO_TRUE ADR=ROL_2 ALU=A-1 bus_A=RW_R1 FLAG=Z ]
      [ ALU=ROL(A) bus_A=RW_Etop GO_FALSE ADR=ROL_1 ]
:ROL_2[ FLAG=ZERO FINISH ]

:SHR_1  [ GO_TRUE ADR=SHR_2 ]
        [ ALU=A-B bus_A=R1 CONST D=20 FLAG=CARRY ]
        [ GO_FALSE ADR=SHR_3 ]
        [ CONST->R1 D=20 ]
:SHR_3  [ ALU=A-1    bus_A=RW_R1   FLAG=Z ]
        [ ALU=ASR(A) bus_A=RW_Etop GO_FALSE ADR=SHR_3 ]
:SHR_2  [ FLAG=ZERO FINISH ]

:SHL_1  [ GO_TRUE ADR=SHR_2 ALU=A bus_A=Etop FLAG=Z ]
        [ GO_TRUE ADR=SHR_2 FLAG=ZERO ]
:SHL_3  [ GO_TRUE ADR=SHL_4 ALU=A-1 bus_A=RW_R1 FLAG=Z ]
        [ ALU=ASL(A) bus_A=RW_Etop FLAG=OVR GO_FALSE ADR=SHL_3 ]
        [ FINISH ]
:SHL_5  [ GO_TRUE ADR=TRAP41 ALU=A-1 bus_A=RW_R1 FLAG=Z ]
:SHL_4  [ ALU=ASL(A) bus_A=RW_Etop FLAG=Z GO_FALSE ADR=SHL_5 ]
        [ GOTO ADR=TRAP41 ]

:BOOLEAN
        [ ALU=B+FLAG CONST->Etop D=0 FLAG=ZERO ]
        [ FINISH ]

:STOFV_1
        [ CALL ADR=CHECK_H ALU=A bus_A=Etop bus_B=WR_R5 ]
        [ bus_A=STACK->Etop CALL ADR=SAVE_STK ]
        [ bus_B=S   WR_MEM_A ]
        [ bus_B=R5  WR_MEM_D ]
        [ ALU=A+1 bus_A=RW_S FLAG=ZERO FINISH ]
:STORE_1
        [ CALL ADR=CHECK_H ]
        [ CALL ADR=SAVE_STK ]
        [ FLAG=ZERO FINISH ]
:LODFV_1
        [ CALL ADR=RESTORE_STK ]
        [ bus_A=Etop->STACK ]
        [ ALU=A bus_A=R4 bus_B=WR_Etop FLAG=ZERO FINISH ]
:DECS_1
        [ FLAG=ZERO bus_A=STACK->Etop FINISH ]
:BIT_1
        [ GO_TRUE ADR=TRAP4A ]
        [ FINISH ]
:IN_1   [ CALL ADR=BIT_S ]
        [ ALU=A_AND_B bus_A=Etop bus_B=R4 FLAG=Z ]
        [ FLAG=NEG(FLAG) GOTO ADR=BOOLEAN ]

:BIT_S  [ ALU=A bus_A=Etop bus_B=WR_R1 FLAG=Z ]
        [ CONST->Etop D=1 FLAG=ZERO RETURN_TRUE ]
:BIT_L  [ ALU=A-1 bus_A=RW_R1 FLAG=Z RETURN_TRUE ]
        [ ALU=A+B bus_A=RW_Etop bus_B=Etop FLAG=CARRY GO_FALSE ADR=BIT_L ]
        [ RETURN ]

:CL_2 [ bus_B=WR_R5 INC_PC ] [ GOTO ADR=Call_Global ]
:CF_1 [ ALU=A-1 bus_A=RW_S RD_MEM_A ]
      [ bus_B=WR_R4 RD_MEM_D REG_EN ADR=Call_External ]
      [ ALU=A bus_A=R4 bus_B=WR_R2 CALL ADR=ROL(R2,8) ]
      [ ALU=A_AND_B bus_A=R2 CONST->R5 D=0FF GO_REG ]

:CI_1 [ bus_B=WR_R5 INC_PC ] [ GOTO ADR=Call_Local ]

:CX_1 [ bus_B=WR_R4 INC_PC ]
      [ UPDATE_CASH ] [ bus_B=WR_R5 INC_PC ]
      [ ALU=A-B-1 bus_A=G bus_B=R4  RD_MEM_A ]
      [ bus_B=WR_R4 RD_MEM_D   GOTO ADR=Call_External ]

:CM_1 [         bus_B=WR_R5 INC_PC  ]
      [ ALU=A-1 bus_A=RW_S  bus_B=WR_R4 GOTO ADR=Call_External ]

:LPC_1[ ALU=A-B-1 bus_A=G INC_PC RD_MEM_A ]
      [ bus_B=WR_Etop RD_MEM_D UPDATE_CASH ]
      [ REG_EN ADR=ROR(R2,8) ]
      [ CONST->R2 D=0FF CALL_REG ]
      [ ALU=A_BIC_B bus_A=RW_Etop bus_B=R2 ]
      [ bus_B=WR_R2 INC_PC CALL_REG ]
      [ ALU=A_OR_B bus_A=RW_Etop bus_B=R2 FLAG=ZERO FINISH ]

:STOT_1
      [ CALL ADR=CHECK_H ]
      [ bus_B=S WR_MEM_A ]
      [ bus_A=STACK->Etop bus_B=R1 WR_MEM_D ]
      [ ALU=A+1 bus_A=RW_S FLAG=ZERO FINISH ]

:LSS_1[ GO_FALSE ADR=LSS_2 ]
      [ ALU=NE(A) bus_A=RW_Etop ]
:LSS_2[ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY GOTO ADR=BOOLEAN ]

:LEQ_1[ GO_FALSE ADR=LEQ_2 ]
      [ ALU=NE(A) bus_A=RW_Etop ]
:LEQ_2[ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY ]
      [ GO_TRUE ADR=BOOLEAN ]
      [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=BOOLEAN ]

:GTR_1[ GO_FALSE ADR=GTR_2 ]
      [ ALU=NE(A) bus_A=RW_Etop ]
:GTR_2[ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY ]
      [ GO_TRUE ADR=NEQ_1 ]
      [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=NEQ_1 ]

:GEQ_1[ GO_FALSE ADR=GEQ_2 ]
      [ ALU=NE(A) bus_A=RW_Etop ]
:GEQ_2[ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY GOTO ADR=NEQ_1 ]

:PCOP_1 % Etop - high, R1 - adr
        [ ALU=A+1 bus_A=RW_Etop UPDATE_CASH ]
        [ ALU=A+B bus_A=L INC_PC WR_MEM_A ]
        [ bus_B=S WR_MEM_D ]
        [ ALU=A bus_A=Etop FLAG=Z ]
        [ GO_TRUE ADR=PCOP_2 ]
        [ ALU=A-1 bus_A=RW_S ]
        [ ALU=A-1 bus_A=RW_R1 ]
:PCOP_3 [ ALU=A-1 bus_A=RW_Etop FLAG=Z ]
        [ ALU=A+1 bus_A=RW_R1 RD_MEM_A ]
        [ bus_B=WR_R2 RD_MEM_D ]
        [ ALU=A+1 bus_A=RW_S WR_MEM_A ]
        [ bus_B=R2    WR_MEM_D GO_FALSE ADR=PCOP_3 ]
        [ ALU=A+1 bus_A=RW_S ]
:PCOP_2 [ bus_A=STACK->Etop FLAG=ZERO FINISH ]

:CPCOP_1
        [ ALU=ROR(A_BIC_B) bus_A=RW_R1 CONST D=3 ]
        [ ALU=ROR(A) bus_A=RW_R1 bus_B=WR_R2 CALL ADR=CHECK_H ]
        [ ALU=A-1    bus_A=R1 bus_B=WR_Etop ]
        [ bus_A=STACK->R1 GOTO ADR=PCOP_1 ]

:DEC_1  [ bus_B=WR_R3 RD_MEM_D ]
        [ ALU=A-B bus_A=RW_R3 bus_B=R2 FLAG=OVR ]
        [ bus_B=Etop  WR_MEM_A ]
        [ bus_B=R3    WR_MEM_D bus_A=STACK->Etop FINISH ]

:INC_1  [ bus_B=WR_R3 RD_MEM_D ]
        [ ALU=A+B bus_A=RW_R3 bus_B=R2 FLAG=OVR ]
        [ bus_B=Etop  WR_MEM_A ]
        [ bus_B=R3    WR_MEM_D bus_A=STACK->Etop FINISH ]

:ANDJP_1[ UPDATE_CASH ]
        [ bus_B=WR_R1 INC_PC ]
        [ GO_TRUE ADR=JUMP ]
        [ bus_A=STACK->Etop FINISH ]

:ALLOC_1[ ALU=A bus_A=S bus_B=RW_Etop ]
        [ ALU=A+B bus_A=R2 bus_B=RW_S FLAG=ZERO FINISH ]

:ENTR_1 [ bus_B=WR_R1 INC_PC ]
        [ ALU=A+B bus_A=RW_R1 bus_B=S ]
        [ ALU=A-B bus_A=R1 bus_B=H FLAG=CARRY ]
        [ GO_TRUE ADR=ENTER_2 ALU=A+B bus_A=M bus_B=M FLAG=CARRY ]
:ENTER_3[ ALU=A bus_A=R1 bus_B=WR_S FLAG=ZERO FINISH ]
:ENTER_2[ GO_FALSE ADR=ENTER_3 ]
        [ CALL ADR=DEC_PC ]
        [ GOTO ADR=TRAP40 ]

:DEC_PC [ ALU=A+B bus_A=RW_PC bus_B=PC ]
        [ ALU=A+B bus_A=RW_PC bus_B=PC ]
        [ ALU=A-1 bus_A=RW_PC ]
        [ ALU=A+B bus_A=RW_PC RW_PC ]
        [ ALU=ROR(A_BIC_B) bus_A=RW_PC CONST D=3 ]
        [ ALU=ROR(A) bus_A=RW_PC RD_MEM_A ]
        [ WR_CASH RD_MEM_D RETURN ]


:RTN_1  [ ALU=A+1 bus_A=S RD_MEM_A ]
        [ bus_B=WR_L      RD_MEM_D ]
        [ ALU=A+B bus_A=S RD_MEM_A CONST D=2 ]
        [ bus_B=WR_PC     RD_MEM_D ]
        [ ALU=A_AND_B bus_A=PC    bus_B=R1 FLAG=Z ]
        [ ALU=A_BIC_B bus_A=RW_PC bus_B=R1 GO_TRUE ADR=RTN_2 ]
        [ bus_B=S         RD_MEM_A ]
        [ bus_B=WR_G      RD_MEM_D ]
        [ bus_B=G         RD_MEM_A ]
        [ bus_B=WR_F      RD_MEM_D ]
:RTN_2  [ ALU=A bus_A=PC RW_PC ]
        [ ALU=ASR(A) bus_A=RW_PC CALL ADR=PUT_PC2 ]
        [ FLAG=ZERO FINISH ]

:LSTA_1 [ bus_B=WR_R1 INC_PC ]
        [ UPDATE_CASH ]
        [ bus_B=WR_R2 INC_PC ]

        [ ALU=A+1 bus_A=G RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D
          CALL ADR=ROL(R2,8) ]
        [ ALU=A+B bus_A=RW_R1 bus_B=R2 ]
        [ ALU=A+B bus_A=RW_Etop bus_B=R1 FLAG=ZERO FINISH ]

:MOVE_1
        [ ALU=A bus_A=Etop FLAG=Z ]
        [ ALU=A-1 bus_A=RW_R1 GO_TRUE ADR=MOVE_2 ]
        [ ALU=A-1 bus_A=RW_R2 ]

:MOVE_L [ ALU=A+1 bus_A=RW_R1 RD_MEM_A FLAG=ZERO ]
        [ bus_B=WR_R3         RD_MEM_D GO_IF_INT_REQ ADR=MOVE_IPT ]
        [ ALU=A-1 bus_A=RW_Etop FLAG=Z ]
        [ ALU=A+1 bus_A=RW_R2 WR_MEM_A ]
        [ bus_B=R3            WR_MEM_D  GO_FALSE ADR=MOVE_L ]

:MOVE_2 [ bus_A=STACK->Etop FLAG=ZERO FINISH ]

:MOVE_IPT  % NOTE! R1 incremented, ready word in R3, so write it!
        [ ALU=A-1 bus_A=RW_Etop FLAG=Z ]
        [ ALU=A+1 bus_A=RW_R2 WR_MEM_A ]
        [ bus_B=R3            WR_MEM_D  GO_TRUE ADR=MOVE_2 ]

        [ ALU=A+1 bus_A=RW_R2 ]
        [ bus_A=R2->STACK ]
        [ ALU=A+1 bus_A=RW_R1 CALL ADR=DEC_PC ]
        [ bus_A=R1->STACK    FLAG=ZERO FINISH ]

:ADDPC_1[ ALU=ASL(A)   bus_A=RW_R1    ]
        [ ALU=A+B      bus_A=RW_R1    RW_PC FLAG=ZERO ]
        [ ALU=A+B      bus_A=RW_Etop  bus_B=R1 FINISH ]

:XIT_1  [ bus_B=WR_PC RD_MEM_D CALL ADR=PUT_PC ]
        [ FLAG=ZERO FINISH ]

:NEXT_RIGHT
        [ ALU=A-1 bus_A=RW_R1 FLAG=N ]
        [ GO_TRUE ADR=NR1 ]
        [ CONST->R1 D=3 ]
        [ ALU=A+1 bus_A=RW_Etop RD_MEM_A ]
        [ bus_B=WR_R2 RD_MEM_D GOTO ADR=NR2 ]
:NR1    [ CALL ADR=ROR(R2,8) ]
:NR2    [ ALU=A_AND_B bus_A=R2 CONST->R3  D=0FF RETURN ]

:ROR(R6,7)
        [ ALU=ROR(A) bus_A=RW_R6 ]
        [ ALU=ROR(A) bus_A=RW_R6 ]
        [ ALU=ROR(A) bus_A=RW_R6 ]
        [ ALU=ROR(A) bus_A=RW_R6 ]
        [ ALU=ROR(A) bus_A=RW_R6 ]
        [ ALU=ROR(A) bus_A=RW_R6 ]
        [ ALU=ROR(A) bus_A=RW_R6 RETURN ]

:NEXT_LEFT
        [ ALU=A-1 bus_A=RW_R5 FLAG=N ]
        [ GO_TRUE ADR=NL1 ]
        [ CONST->R5 D=3 ]
        [ ALU=A+1 bus_A=RW_R4 RD_MEM_A ]
        [ bus_B=WR_R6 RD_MEM_D GOTO ADR=NL2 ]
:NL1    [ ALU=ROR(A) bus_A=RW_R6 CALL ADR=ROR(R6,7) ]
:NL2    [ ALU=A_AND_B bus_A=R6 CONST->Time  D=0FF RETURN ]

:COMP_1
        [ bus_A=Time->STACK ]
        [ ALU=A-1 bus_A=RW_Etop ]
        [ ALU=A-1 bus_A=RW_R4 ]
:COMP_L [ CALL ADR=NEXT_RIGHT ]
        [ CALL ADR=NEXT_LEFT ]
        [ ALU=A   bus_A=R3 FLAG=Z ]
        [ GO_TRUE ADR=COMP_2
          ALU=A-B bus_A=R3 bus_B=Time FLAG=Z ]
        [ GO_TRUE ADR=COMP_L ]
:COMP_2
% Last bytes in Time,R3
        [ ALU=A bus_A=R3 bus_B=WR_Etop ]
        [ ALU=A bus_A=Time bus_B=WR_R1 ]
        [ bus_A=STACK->Time ]
        [ bus_A=R1->STACK FLAG=ZERO FINISH ]


:FALSE->Etop
        [ ALU=A_BIC_B bus_A=RW_Etop bus_B=Etop FLAG=ZERO FINISH ]

:RCHKZ_1[ GO_FALSE ADR=FALSE->Etop
          ALU=A FLAG=N bus_A=STACK->Etop ]
        [ GO_FALSE ADR=FALSE->Etop
          ALU=A-B  bus_A=R1 bus_B=Etop FLAG=CARRY ]
        [ GOTO ADR=BOOLEAN ]

:RCHK_1  % r1 - high, r2 - low
        [ bus_A=STACK->Etop ] % Etop - checked value
        [ ALU=A-B bus_A=Etop  bus_B=RW_R2 FLAG=OVR ]
        [ ALU=A-B bus_A=RW_R1 bus_B=Etop  FLAG=OVR GO_FALSE ADR=RCHK_2 ]
        [ ALU=NE(A) bus_A=RW_R2 GO_FALSE  ADR=RCHK_3 ]
        [ ALU=NE(A) bus_A=RW_R1 GOTO      ADR=RCHK_3 ]
:RCHK_2 [ GO_FALSE   ADR=RCHK_3 ]
        [ ALU=NE(A) bus_A=RW_R1 ]
:RCHK_3 [ ALU=A_OR_B bus_A=RW_R1 bus_B=R2 FLAG=N
          GOTO ADR=BOOLEAN ]

:CHKZ_1 [ GO_FALSE ADR=TRAP4A
          ALU=A    bus_A=R1 FLAG=N ]
        [ GO_FALSE ADR=TRAP4A
          ALU=A-B  bus_A=R1 bus_B=Etop FLAG=CARRY ]
        [ GO_FALSE ADR=TRAP4A FLAG=ZERO ]
        [ FINISH ]

:CHK_1  % r1 - high, r2 - low
        [ bus_A=STACK->Etop ] % Etop - checked value

        [ ALU=A-B bus_A=Etop  bus_B=RW_R2 FLAG=OVR ]
        [ ALU=A-B bus_A=RW_R1 bus_B=Etop  FLAG=OVR GO_FALSE ADR=CHK_2 ]
        [ ALU=NE(A) bus_A=RW_R2 GO_FALSE ADR=CHK_3 ]
        [ ALU=NE(A) bus_A=RW_R1 GOTO ADR=CHK_3 ]
:CHK_2  [ GO_FALSE ADR=CHK_3 ]
        [ ALU=NE(A) bus_A=RW_R1 ]
:CHK_3  [ ALU=A_OR_B bus_A=RW_R1 bus_B=R2 FLAG=N ]
        [ GO_FALSE ADR=TRAP4A ]
        [ FLAG=ZERO FINISH ]

:GB_1   [ ALU=B bus_A=WR_R2 INC_PC FLAG=Z ]
:GB_3   [ ALU=A-1 bus_A=RW_R2 FLAG=Z GO_TRUE ADR=GB_2 ]
        [ bus_B=Etop    RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D GOTO ADR=GB_3 ]
:GB_2   [ FLAG=ZERO FINISH ]

:ABS_1  [ GO_FALSE ADR=NOP ]
        [ ALU=NEG(A) bus_A=RW_Etop FLAG=OVR FINISH ]


        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:PDX_1
        [ ALU=A+1  bus_A=R1     RD_MEM_A ]
        [          bus_B=WR_R2  RD_MEM_D        % R2 = HIGH

          GO_FALSE ADR=TRAP4A ]                 % if Etop(index)<0 then TRAP4A

        [ ALU=A    bus_A=R2     FLAG=N ]
        [ GO_FALSE ADR=TRAP4A                   % if HIGH<0 then TRAP4A
          ALU=A-B  bus_A=R2     bus_B=Etop  FLAG=CARRY ]

        [          bus_B=R1     RD_MEM_A ]
        [          bus_B=WR_R3  RD_MEM_D        % R3 = BASE
          GO_FALSE ADR=TRAP4A   FLAG=ZERO ]
        [          bus_A=R3->STACK FINISH ]

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:SYS_1
        [ ALU=B   bus_B=WR_R1 INC_PC FLAG=Z ]   % R1=0? goto SYS0
        [ GO_TRUE ADR=SYS0
          ALU=A-1 bus_A=RW_R1        FLAG=Z ]   % R1=1? goto DROP
        [ GO_TRUE ADR=DROP
          ALU=A-1 bus_A=RW_R1        FLAG=Z ]   % R1=2? goto SYS2
        [ GO_TRUE ADR=SYS2  ]
:SYS_NII[ CALL ADR=DEC_PC ]
        [ GOTO ADR=NII ]
:SYS0   [ bus_A=Etop->STACK CONST->Etop D=5. ]
        [ FLAG=ZERO FINISH ]
:SYS2   [ bus_A=Etop->STACK CONST->Etop D=0F ]
        [ FLAG=ZERO FINISH ]

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:SWAP_1 [ bus_A=R1->STACK FINISH ]

:LPA_1  [ ALU=A-B-1 bus_A=RW_Etop INC_PC ]
        [ FINISH ]
:LPW_1  [ ALU=A-B-1 bus_A=L INC_PC RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:SPW_1  [ ALU=A-B-1 bus_A=L    INC_PC WR_MEM_A ]
        [           bus_B=Etop        WR_MEM_D ]
        [ bus_A=STACK->Etop FINISH ]

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:BOX_CHK[ CONST->R2 D=0FF ]
        [ ALU=ROL(A) bus_A=RW_R2 CALL ADR=ROL(R2,7) ]
        [ ALU=A_OR_B bus_A=RW_R2 CONST D=0FF ]
        [ ALU=A+B bus_A=Etop CONST D=0 RD_MEM_A ]
        [ bus_B=WR_R3 RD_MEM_D ]
        [ ALU=A+B bus_A=R1   CONST D=1 RD_MEM_A ]
        [ bus_B=WR_R4 RD_MEM_D ]
% Etop - box1
% R1   - box2
% R2   - mask
% R3   - A
% R4   - D
        [ ALU=A-B bus_A=R4 bus_B=R3 FLAG=CARRY ]
        [ GO_FALSE ADR=BOX0
          ALU=A_AND_B bus_A=RW_R3 bus_B=R2 ]
        [ ALU=A_AND_B bus_A=RW_R4 bus_B=R2 ]
        [ ALU=A-B bus_A=R4 bus_B=R3 FLAG=CARRY ]
        [ GO_FALSE ADR=BOX0 ]
        [ ALU=A+B bus_A=Etop CONST D=1 RD_MEM_A ]
        [ bus_B=WR_R3 RD_MEM_D ]
        [ ALU=A+B bus_A=R1   CONST D=0 RD_MEM_A ]
        [ bus_B=WR_R4 RD_MEM_D ]
% R3   - B
% R4   - C
        [ ALU=A-B bus_A=R3 bus_B=R4 FLAG=CARRY ]
        [ GO_FALSE ADR=BOX0
          ALU=A_AND_B bus_A=RW_R3 bus_B=R2 ]
        [ ALU=A_AND_B bus_A=RW_R4 bus_B=R2 ]
        [ ALU=A-B bus_A=R3 bus_B=R4 FLAG=CARRY ]
        [ GO_FALSE ADR=BOX0 ]
        [ CONST->Etop D=1 FLAG=ZERO FINISH ]
:BOX0   [ CONST->Etop D=0 FLAG=ZERO FINISH ]

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:BITL_S [ ALU=A bus_A=Etop bus_B=WR_R2 FLAG=Z ]
:BITL_SF[ CONST->Etop D=1 RETURN_TRUE ]
:BITL_S2[ ALU=A-1 bus_A=RW_R2 FLAG=Z ]
        [ ALU=ROL(A) bus_A=RW_Etop GO_FALSE ADR=BITL_S2 ]
        [ RETURN ]

:INCL_1 [ ALU=A_BIC_B bus_A=Etop CONST->R3 D=1F FLAG=Z ]
        [ ALU=A-B bus_A=RW_Etop bus_B=R3 GO_TRUE ADR=INCL2 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=A+B bus_A=RW_R1 bus_B=R3 ]
:INCL2  [ ALU=A bus_A=Etop bus_B=WR_R2 FLAG=Z CALL ADR=BITL_SF ]
        [ bus_B=R1    RD_MEM_A ]
        [ bus_B=WR_R2 RD_MEM_D ]
        [ ALU=A_OR_B  bus_A=RW_R2 bus_B=Etop ]
        [ bus_B=R1    WR_MEM_A ]
        [ bus_B=R2    WR_MEM_D bus_A=STACK->Etop FLAG=ZERO FINISH ]

:EXCL_1 [ ALU=A_BIC_B bus_A=Etop CONST->R3 D=1F FLAG=Z ]
        [ ALU=A-B bus_A=RW_Etop bus_B=R3 GO_TRUE ADR=EXCL2 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=A+B bus_A=RW_R1 bus_B=R3 ]
:EXCL2  [ ALU=A bus_A=Etop bus_B=WR_R2 FLAG=Z CALL ADR=BITL_SF ]
        [ bus_B=R1    RD_MEM_A ]
        [ bus_B=WR_R2 RD_MEM_D ]
        [ ALU=A_BIC_B  bus_A=RW_R2 bus_B=Etop ]
        [ bus_B=R1    WR_MEM_A ]
        [ bus_B=R2    WR_MEM_D bus_A=STACK->Etop FLAG=ZERO FINISH ]

:INL_1  [ bus_A=STACK->R1 ] % r1 - adr
        [ bus_A=STACK->R2 ] % r2 - bit, etop - size
        [ ALU=A+B bus_A=R2 bus_B=R2   FLAG=CARRY ]
        [ ALU=A-B bus_A=R2 bus_B=Etop FLAG=CARRY GO_TRUE ADR=INL_FALSE ]
        [ GO_TRUE ADR=INL_FALSE ]
        [ ALU=A_BIC_B bus_A=R2 CONST->R3 D=1F FLAG=Z ]
        [ ALU=A-B bus_A=RW_R2  bus_B=R3 GO_TRUE ADR=INL2 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=ASR(A) bus_A=RW_R3 ]
        [ ALU=A+B bus_A=RW_R1 bus_B=R3 ]
:INL2   [ ALU=A bus_A=R2 FLAG=Z CALL ADR=BITL_SF ]
        [ bus_B=R1    RD_MEM_A ]
        [ bus_B=WR_R2 RD_MEM_D ]
        [ ALU=A_AND_B bus_A=R2 bus_B=Etop FLAG=Z ]
        [ FLAG=NEG(FLAG) ]
        [ ALU=B+FLAG CONST->Etop D=0 FLAG=ZERO FINISH ]
:INL_FALSE
        [ CONST->Etop D=0 FLAG=ZERO FINISH ]

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:INT_OWR[ CALL ADR=DEC_PC ]
        [ CONST->R1 D=41  ]
        [ ALU=B bus_B=M RESET_MP_ERR    ]
        [ GOTO ADR=TRAPED ]

:STK    [ CALL ADR=DEC_PC ]
        [ CONST->R1 D=4C  ]
        [ ALU=B bus_B=M RESET_STK_OVR   ]
        [ GOTO ADR=TRAPED ]

:ACL    [ CALL ADR=DEC_PC ]
        [ CONST->R1 D=3   ]
        [ ALU=B bus_B=M RESET_ACL       ]
        [ GOTO ADR=INTERUPT ]

:TIME   [ CALL ADR=DEC_PC ]
        [ ALU=A+1 bus_A=RW_Time CALL ADR=REFRESH ]
        [ ALU=A_AND_B bus_A=M CONST D=2 FLAG=Z ]
        [ GO_FALSE ADR=TIME_1 ]
:TIME_2 [ FLAG=ZERO FINISH ]
:TIME_1 [ ALU=A-B bus_A=Time CONST D=14 FLAG=CARRY ]
        [ GO_FALSE ADR=TIME_2 ]
        [ ALU=A-B bus_A=Time CONST D=0A0 FLAG=CARRY ]
        [ GO_FALSE ADR=TIME_3 ]
        [ CONST->Time D=14 ]
:TIME_3 [ ALU=A-B bus_A=RW_Time CONST D=14 ]
        [ CONST->R1 D=1 ]
        [ GOTO ADR=INTERUPT ]

:CONSOL [ GOTO ADR=IO_INT ]

:DEBUG  [ ALU=B bus_B=M RESET_INC_PC ]
        [ CALL ADR=DEC_PC ]
        [ CONST->R1 D=0B ]
        [ GOTO ADR=INTERUPT ]

:CH_INT
:IO_INT [ CALL ADR=DEC_PC ]
        [ CONST->R1 D=06 ]
        [ GOTO ADR=INTERUPT ]
