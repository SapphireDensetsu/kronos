:START
% Reset interrupt requests.
        [ RESET_MP_ERR    FLAG=ZERO ]
        [ RESET_STK_OVR   ]
        [ RESET_ACL       ]
        [ RESET_TIME      ]
        [ RESET_INC_PC    CALL ADR=INIT_STACK ]
% Init memory manager
        [ CONST D=2 WR_SIO_A ]
        [ CONST D=8 WR_SIO_D ] % Key := 8
        [ CONST->R1 D=3 ]
        [ CONST->R2 D=8 ]
        [ CALL ADR=ROL(R2,8) ]
:INIT_M1[ bus_B=R1  WR_SIO_A ]
        [ CONST D=1 WR_SIO_D ]
        [ ALU=A+B bus_A=RW_R1 CONST D=80 ]
        [ ALU=A+B bus_A=RW_R1 CONST D=80 ]
        [ ALU=A-1 bus_A=RW_R2 FLAG=Z ]
        [ GO_FALSE  ADR=INIT_M1 ]

        [ CALL ADR=ADR(BUF)->R2 ]
        [ ALU=A+B bus_A=R2 CONST D=0 WR_MEM_A ]
        [ CONST D=0FF WR_MEM_D ]
        [ ALU=A+B bus_A=R2 CONST D=1 WR_MEM_A ]
        [ CONST D=0 WR_MEM_D ]
        [ ALU=A+B bus_A=R2 CONST D=2 WR_MEM_A ]
        [ CONST D=0 WR_MEM_D ]
        [ ALU=A+B bus_A=R2 CONST D=3 WR_MEM_A ]
        [ CONST D=8 WR_MEM_D ]

%        [ CALL ADR=REG_TEST   ]
%        [ CALL ADR=STACK_TEST ]
%        [ CALL ADR=INIT_STACK ]

        [ CONST->Time D=0 ] % Cleare timer
        [ CONST->M D=0 ]
        [ CALL ADR=ADR(BUF)->R2 ]
        [ GOTO ADR=WAIT ]

:WAIT_1 [ CALL ADR=UNLOCK ]
:WAIT   % Waiting for run
        [ CALL ADR=LOCK ]
        [ ALU=A+B bus_A=R2 CONST D=1 RD_MEM_A ]
        [ bus_B=WR_P RD_MEM_D ]
        [ ALU=A bus_A=P FLAG=Z ]
        [ GO_TRUE ADR=WAIT_1 ]
        [ ALU=A+B bus_A=R2 CONST D=1 WR_MEM_A ]
        [ CONST D=0 WR_MEM_D ]
        [ CALL ADR=UNLOCK ]
        [ CALL ADR=RESTORE_REGS ]
        [ FLAG=ZERO FINISH ]

:INIT_STACK
% Init expression stack
        [ STACK_UP ]
        [ GO_IF_STACK_EMPTY ADR=INIT_STACK ]
:INIT_STACK1
        [ STACK_DOWN ]
        [ GO_IF_STACK_EMPTY ADR=INIT_STACK2 ]
        [ GOTO ADR=INIT_STACK1 ]
:INIT_STACK2
        [ RETURN ]

:ROL(R2,8)
      [ ALU=ROL(A) bus_A=RW_R2 ]
:ROL(R2,7)
      [ ALU=ROL(A) bus_A=RW_R2 ]
      [ ALU=ROL(A) bus_A=RW_R2 ]
      [ ALU=ROL(A) bus_A=RW_R2 ]
      [ ALU=ROL(A) bus_A=RW_R2 ]
      [ ALU=ROL(A) bus_A=RW_R2 ]
      [ ALU=ROL(A) bus_A=RW_R2 ]
      [ ALU=ROL(A) bus_A=RW_R2 RETURN ]
:ROR(R2,8)
      [ ALU=ROR(A) bus_A=RW_R2 ]
:ROR(R2,7)
      [ ALU=ROR(A) bus_A=RW_R2 ]
      [ ALU=ROR(A) bus_A=RW_R2 ]
      [ ALU=ROR(A) bus_A=RW_R2 ]
      [ ALU=ROR(A) bus_A=RW_R2 ]
      [ ALU=ROR(A) bus_A=RW_R2 ]
      [ ALU=ROR(A) bus_A=RW_R2 ]
      [ ALU=ROR(A) bus_A=RW_R2 RETURN ]

:LAMP_ON
        [ bus_A=R1->STACK ]
        [ ALU=NE(B) CONST->R1 D=0 ]
        [ RESET_MP_ERR bus_B=R1  ]
        [ bus_A=STACK->R1 RETURN ]
:LAMP_OFF
        [ RESET_MP_ERR ]
        [ RETURN ]


%:REG_TEST
%        [ CONST->Etop   D=055 ]
%        [ CONST->R1     D=0AA ]
%        [ CONST->R2     D=0FF ]
%        [ ALU=A_OR_B    bus_A=RW_Etop   bus_B=R1 ]
%        [ ALU=A-B       bus_A=Etop      bus_B=R2   FLAG=Z ]
%          [ GO_TRUE ADR=RT1 ]
%          [ CALL ADR=LAMP_ON ]
%:RT_ERR0  [ bus_A=Etop bus_B=R2 GOTO ADR=RT_ERR0 ]
%
%:RT1
%        [ CONST->R1 D=1 ]
%        [ CONST->R2 D=16. ]
%:RT2    [ ALU=ROL(A) bus_A=RW_R1 ]
%        [ ALU=ROL(A) bus_A=RW_R1 ]
%        [ ALU=A_OR_B bus_A=RW_R1 CONST D=1 ]
%        [ ALU=A-1    bus_A=RW_R2 FLAG=Z ]
%        [ GO_FALSE ADR=RT2 ]
%
%        [ ALU=ROL(A) bus_A=R1    bus_B=WR_R2 ]
%        [ ALU=ROL(A) bus_A=RW_R2 bus_B=WR_R2 ]
%        [ ALU=A-B    bus_A=R2    bus_B=R1  FLAG=Z ]
%          [ GO_TRUE ADR=RT3 ]
%          % R1 # 101010101010101010
%          [ CALL ADR=LAMP_ON ]
%:RT_ERR1  [ bus_A=R1   bus_B=R1 GOTO ADR=RT_ERR1 ]
%
%:RT3    % R1 = 101010101....
%
%        [ bus_A=R1->STACK ]
%        [ CONST->R2 D=0FF ]
%        [ CALL ADR=ROL(R2,8) ]
%        [ bus_A=R2->STACK ]
%
%:RT_LOOP
%        [ bus_A=STACK->R2 ]
%        [ bus_A=STACK->R1 ]
%        [ ALU=B->P bus_B=R1 bus_A=R1->STACK ]
%        [ ALU=A-1  bus_A=RW_R2 FLAG=Z ]
%        [ bus_A=R2->STACK
%          GO_TRUE ADR=RT_OK ]
%
%        [ ALU=A_AND_B  bus_A=R2 CONST D=1 FLAG=Z ]
%        [ GO_TRUE ADR=RT4 ]
%        [ ALU=NE(A)    bus_A=RW_R1 ]
%        [ ALU=B->P     bus_B=R1    ]
%
%:RT4    [ ALU=P bus_A=WR_Etop   bus_B=WR_R1   ]
%        [ ALU=P bus_A=WR_R2     bus_B=WR_R3   ]
%        [ ALU=P bus_A=WR_R4     bus_B=WR_R5   ]
%        [ ALU=P bus_A=WR_R6     bus_B=WR_Time ]
%
%        [ ALU=P bus_A=WR_P      bus_B=WR_M    ]
%        [ ALU=P bus_A=WR_PC     bus_B=WR_G    ]
%        [ ALU=P bus_A=WR_L      bus_B=WR_S    ]
%        [ ALU=P bus_A=WR_H      bus_B=WR_F    ]
%
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_R1   ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_R2   ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_R3   ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_R4   ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_R5   ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_R6   ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_Time ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_P    ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_M    ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_PC   ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_G    ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_L    ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_S    ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_H    ]
%        [ ALU=A_OR_B bus_A=RW_Etop   bus_B=RW_F    ]
%
%        [ ALU=P bus_B=WR_R1 ]
%        [ ALU=A-B bus_A=Etop bus_B=R1 FLAG=Z ]
%        [ GO_TRUE ADR=RT5 ]
%          [ CALL ADR=LAMP_ON ]
%:RT_ERR2  [ bus_A=Etop bus_B=R1 GOTO ADR=RT_ERR2 ]
%
%:RT5    [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_R1   ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_R2   ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_R3   ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_R4   ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_R5   ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_R6   ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_Time ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_P    ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_M    ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_PC   ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_G    ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_L    ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_S    ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_H    ]
%        [ ALU=A_AND_B bus_A=RW_Etop   bus_B=RW_F    ]
%
%        [ ALU=P bus_B=WR_R1 ]
%        [ ALU=A-B bus_A=Etop bus_B=R1 FLAG=Z ]
%        [ GO_TRUE ADR=RT_LOOP ]
%          [ CALL ADR=LAMP_ON ]
%:RT_ERR3  [ bus_A=Etop bus_B=R1 GOTO ADR=RT_ERR3 ]
%
%:RT_OK  [ bus_A=STACK->R1 ]
%        [ bus_A=STACK->R1 ]
%
%:STACK_TEST % P = 101010101....
%        [ ALU=P  bus_A=WR_R1 ]  % R1:=P
%        [ CONST->R2 D=0FF ]
%        [ CALL ADR=ROL(R2,8) ]
%
%:ST_LOOP
%        [ ALU=A-1  bus_A=RW_R2 FLAG=Z  REG_EN ADR=ST_OK ]
%        [ GO_REG_TRUE % ADR=ST_OK
%
%          ALU=A_AND_B  bus_A=R2 CONST D=1 FLAG=Z ]
%        [ GO_TRUE ADR=ST_3 ]
%        [ ALU=NE(A)    bus_A=RW_R1 ]
%:ST_3
%        [ CONST->R6 D=16. ]
%:ST3    [ ALU=A-1 bus_A=RW_R6 FLAG=Z ]
%        [ bus_A=R1->STACK GO_FALSE ADR=ST3 ]
%
%        [ CONST->R3 D=0 ]
%        [ ALU=A bus_A=R1 bus_B=WR_R4 ]
%
%        [ CONST->R6 D=16. ]
%:ST4    [ ALU=A-1 bus_A=RW_R6 FLAG=Z ]
%        [ bus_A=STACK->R5 ]
%        [ ALU=A_OR_B  bus_A=R5 bus_B=RW_R3 ]
%        [ ALU=A_AND_B bus_A=R5 bus_B=RW_R4
%          GO_FALSE ADR=ST4 ]
%
%:ST5    [ ALU=A-B bus_A=R1 bus_B=R3 FLAG=Z ]
%        [ GO_TRUE ADR=ST6 ]
%          [ CALL ADR=LAMP_ON ]
%:ST_ERR3  [ bus_A=R3   bus_B=R1 GOTO ADR=ST_ERR3 ]
%
%:ST6    [ ALU=A-B bus_A=R1 bus_B=R4 FLAG=Z ]
%        [ GO_TRUE ADR=ST_LOOP ]
%          [ CALL ADR=LAMP_ON ]
%:ST_ERR4  [ bus_A=R4   bus_B=R1 GOTO ADR=ST_ERR4 ]
%
%:ST_OK
%        [ RETURN ]

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:ADR(BUF)->R2
% R2:= Address of processor control buffer
%      0CFFF0h - free flag
%      0CFFF4h - process for continue
%      0CFFF8h - stoped process
%      0CFFFCh - halt no
        [ REG_EN ADR=ROL(R2,8) ]
        [ CONST->R2 D=00B CALL_REG ]
        [ CONST->R2 D=03F ALU=A_OR_B bus_A=R2 CALL_REG ]
        [ CONST->R2 D=0FC ALU=A_OR_B bus_A=R2 RETURN ]

:LOCK   [ CALL ADR=REFRESH ]
        [ CALL ADR=ADR(BUF)->R2 ]
        [ bus_B=R2    RD_MEM_A ]
        [ bus_B=WR_R1 RD_LOCK  ]
        [ bus_B=R2    WR_MEM_A ]
        [ CONST D=0   WR_MEM_D ]
        [ ALU=A_AND_B bus_A=R1 CONST D=0FF FLAG=Z ]
        [ GO_TRUE ADR=LOCK ]
        [ RETURN ]

:UNLOCK [ CALL ADR=ADR(BUF)->R2 ]
        [ bus_B=R2  WR_MEM_A ]
        [ CONST D=0FF WR_MEM_D RETURN ]

:UPDATE_CASH_S
        [ ALU=A+1 bus_A=RW_PC RD_MEM_A ]
        [ WR_CASH RD_MEM_D RETURN ]

:REFRESH   % 256 cycles!
        [ ALU=B bus_B=M RESET_TIME ]
        [ ALU=ROL(B) CONST->R2 D=80 ]
:REF_1  [ ALU=A-1 bus_A=RW_R2 FLAG=Z RD_MEM_A ]
        [                            RD_MEM_D GO_FALSE ADR=REF_1 ]
        [ FLAG=ZERO RETURN ]

:TRAP4A [ CONST->R1 D=4A ]
        [ GOTO ADR=TRAPED ]
:TRAP41 [ CONST->R1 D=41 ]

:TRAPED         % R1-Trap no.
        [ ALU=A+B  bus_A=P CONST D=6 WR_MEM_A ]
        [ bus_B=R1 WR_MEM_D ]
:INTERUPT       % R1-Trap no.
        [ ALU=A-B bus_A=R1 CONST D=3F FLAG=CARRY ]
        [ ALU=A bus_A=R1 bus_B=WR_R4 GO_FALSE ADR=INT1 ]
        [ CONST->R1 D=3F ]
:INT1   % R1 - vector, R4 - trap no
        [ ALU=A-B bus_A=R4 CONST D=10 FLAG=CARRY ]
        [ GO_TRUE ADR=INT2 ALU=A bus_A=R1 bus_B=WR_R3 FLAG=Z ]
        % Trap no < 10h
        [ CONST->R2 D=1 ]
        [ GO_TRUE ADR=INT5 ] % Go if trap no = 0
:INT4   [ ALU=A-1 bus_A=RW_R3 FLAG=Z ]
        [ ALU=ROL(A) bus_A=RW_R2 GO_FALSE ADR=INT4 ]
:INT3   [ ALU=A_AND_B bus_A=M bus_B=R2 FLAG=Z ]
        [ GO_FALSE ADR=TRAP_S ]
        [ ALU=A_AND_B bus_A=R2 CONST D=0FC FLAG=Z ]
        [ GO_FALSE ADR=HALTED ]
:INT5   [ FLAG=ZERO FINISH ]
:INT2   % Trap no >= 10h
        [ ALU=A-B bus_A=R4 CONST D=3F FLAG=CARRY ]
        [ GO_FALSE ADR=TRAP_S ]% Go if trap no >= 10h & < 3F
        [ ALU=A+B bus_A=M bus_B=M FLAG=CARRY REG_EN ADR=INT5 ]
        [ GO_TRUE ADR=TRAP_S ]

        [ ALU=A-B bus_A=R1 CONST D=4D FLAG=CARRY ]
        [ GO_REG_TRUE    % ADR=INT5       % R1>=4D
          ALU=A-B bus_A=R1 CONST D=45 FLAG=CARRY ]
        [ GO_REG_FALSE ] % ADR=INT5       % R1< 45

:HALTED % R4 - Halt number
        [ ALU=A_AND_B bus_A=M CONST D=4 FLAG=Z ]
        [ ALU=A bus_A=R4 bus_B=WR_R6 GO_TRUE ADR=HALT1 ]
        [ CONST->R1 D=2 ]
        [ GOTO ADR=INTERUPT ]
:HALT1  [ CALL ADR=SAVE_REGS ]
        [ CALL ADR=LOCK ]
        [ ALU=A+B bus_A=R2 CONST D=3 WR_MEM_A ]
        [ bus_B=R6 WR_MEM_D ]
        [ ALU=A+B bus_A=R2 CONST D=2 WR_MEM_A ]
        [ bus_B=P WR_MEM_D CALL ADR=UNLOCK ]
        [ GOTO ADR=WAIT ]

:CHECK_H % ПРОВЕРКА НАЛИЧИЯ МЕСТА НА ПРОЦЕДУРНОМ СТЕКЕ
         % R2-Size, Destroed R2, FLAG.
        [ ALU=A+B bus_A=RW_R2 bus_B=S ]
        [ ALU=A-B bus_A=R2 bus_B=H FLAG=CARRY ]
        [ RETURN_FALSE ALU=A+B bus_A=M bus_B=M FLAG=CARRY ]
        [ RETURN_FALSE ]
:TRAP40 [ CALL ADR=DEC_PC ]
:TRAP40S[ CONST->R1 D=40 ]
        [ GOTO ADR=TRAPED ]

:SAVE_STK       % T=4   Destroed R3, R4.
        [ ALU=A-1 bus_A=RW_S bus_B=WR_R3 GO_IF_STACK_EMPTY ADR=SAVE_3 ]

:SAVE_2 [ ALU=A+1 bus_A=RW_S WR_MEM_A GO_IF_STACK_EMPTY ADR=SAVE_1 ]
        [ bus_A=STACK->R4   bus_B=Etop WR_MEM_D ]
        [ ALU=A+1 bus_A=RW_S WR_MEM_A GO_IF_STACK_EMPTY ADR=SAVE_1 ]
        [ bus_A=STACK->Etop bus_B=R4   WR_MEM_D GOTO ADR=SAVE_2 ]

:SAVE_1 [ CONST D=0 WR_MEM_D ]
        [ ALU=A-B-1  bus_A=S bus_B=RW_R3 ]
        [ bus_B=S    WR_MEM_A ]
        [ bus_B=R3   WR_MEM_D ]
        [ ALU=A+1 bus_A=RW_S RETURN ]

:SAVE_3 [ ALU=A+1 bus_A=RW_S WR_MEM_A ]
        [ CONST D=0 WR_MEM_D ]
        [ ALU=A+1 bus_A=RW_S RETURN ]

:RESTORE_STK    % T=4   Destroed R3, FLAG.
        [ ALU=A-1 bus_A=RW_S RD_MEM_A ]
        [ bus_B=WR_R3 RD_MEM_D ]
        [ ALU=A_AND_B bus_A=RW_R3 CONST D=0F FLAG=Z ]
:RES_1  [ ALU=A-1 bus_A=RW_R3 FLAG=Z RETURN_TRUE ]
        [ ALU=A-1 bus_A=RW_S RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D GOTO ADR=RES_1 ]

:SAVE_REGS      % T=25  Destroed R3, R4. !DON'T TOUCH R5! see :TRANSFER
        [ CALL ADR=SAVE_STK ]
        [ ALU=A-B bus_A=RW_PC bus_B=F ]
        [ ALU=ASL(A) bus_A=RW_PC ]
        [ ALU=ASL(A) bus_A=RW_PC ]
        [ ALU=A+B bus_A=RW_PC RW_PC ]
        [ ALU=A+B bus_A=RW_H CONST D=0C ]
        [ ALU=A+B bus_A=P CONST D=0 WR_MEM_A ]
        [ bus_B=G WR_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=1 WR_MEM_A ]
        [ bus_B=L WR_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=2 WR_MEM_A ]
        [ bus_B=PC WR_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=3 WR_MEM_A ]
        [ bus_B=M WR_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=4 WR_MEM_A ]
        [ bus_B=S WR_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=5 WR_MEM_A ]
        [ bus_B=H WR_MEM_D ]
        [ CONST D=1 WR_MEM_A ]
        [ bus_B=P WR_MEM_D RETURN ]

:RESTORE_REGS   % T=28  Destroed R3, FLAG.
        [ CONST D=0 WR_MEM_A ]
        [ bus_B=P   WR_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=0 RD_MEM_A ]
        [ bus_B=WR_G RD_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=1 RD_MEM_A ]
        [ bus_B=WR_L RD_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=2 RD_MEM_A ]
        [ bus_B=WR_PC RD_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=3 RD_MEM_A ]
        [ bus_B=WR_M RD_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=4 RD_MEM_A ]
        [ bus_B=WR_S RD_MEM_D ]
        [ ALU=A+B bus_A=P CONST D=5 RD_MEM_A ]
        [ bus_B=WR_H RD_MEM_D CALL ADR=RESTORE_STK ]
        [ bus_B=G RD_MEM_A ]
        [ bus_B=WR_F RD_MEM_D ]
        [ ALU=A bus_A=PC RW_PC ]
        [ ALU=ASR(A) bus_A=RW_PC ]
        [ ALU=ASR(A) bus_A=RW_PC ]
        [ ALU=A+B bus_A=RW_PC bus_B=F ]
        [ bus_B=PC  RD_MEM_A ]
        [ WR_CASH   RD_MEM_D ]
        [ ALU=B bus_B=M RESET_STK_OVR ]
        [ ALU=B bus_B=M RESET_INC_PC ]
        [ ALU=A-B bus_A=RW_H CONST D=0C RETURN ]

:TRANSFER % R1-Pto, R2-Pfrom    T=59,   Exit by FINISH !!!
        [ bus_B=R1 RD_MEM_A ]
        [ bus_B=WR_R5 RD_MEM_D ]
        [ bus_B=R2 WR_MEM_A ]
        [ bus_B=P  WR_MEM_D CALL ADR=SAVE_REGS ]
        [ ALU=A bus_A=R5 bus_B=WR_P CALL ADR=RESTORE_REGS ]
        [ FLAG=ZERO FINISH ]

:TRAP_S % R1 - vector                   Exit by FINISH !!!
        [ ALU=A+B bus_A=RW_R1 bus_B=R1 ]
        [ ALU=A+B bus_A=R1 CONST D=1 RD_MEM_A ]
        [ bus_B=WR_R2 RD_MEM_D GOTO ADR=TRANSFER ]

:Call_External    % R4-Module no, R5-Procedure no.
        [ bus_B=R4    RD_MEM_A ] % this dereference must be executed
        [ bus_B=WR_R4 RD_MEM_D ] % before first writting in memory (see CM)
        [ ALU=A   bus_A=S bus_B=WR_R2 WR_MEM_A ]
        [         bus_B=G             WR_MEM_D CALL ADR=GET_PC ]
        [ ALU=A+1 bus_A=RW_S WR_MEM_A ]
        [ bus_B=L            WR_MEM_D ]
        [ ALU=ROR(B) CONST->R3   D=1  ]
        [ ALU=A_OR_B bus_A=RW_PC bus_B=R3 ]
        [ ALU=A+1    bus_A=RW_S  WR_MEM_A ]
        [            bus_B=PC    WR_MEM_D ]
        [ ALU=A+B    bus_A=RW_S  CONST D=2  ]
        [ ALU=A      bus_A=R2    bus_B=WR_L ]
        [ bus_B=R4   RD_MEM_A    bus_A=WR_G ALU=B ]
        [ bus_B=WR_F RD_MEM_D    GOTO ADR=MARK2 ]

:Call_Global      % R5-Procedure no.

        [ bus_A=L ALU=A bus_B=WR_R1 GOTO ADR=MARK ]

:Call_Local       % R5-Procedure no.

        [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->Etop ]

:MARK   % R1-X, Destroed R2,R3,PC
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A ]
        [ bus_B=R1 WR_MEM_D CALL ADR=GET_PC ]
        [ ALU=A+1 bus_A=RW_S WR_MEM_A ]
        [ bus_B=L WR_MEM_D ]
        [ ALU=A+1 bus_A=RW_S WR_MEM_A ]
        [ bus_B=PC WR_MEM_D ]
        [ ALU=A+B bus_A=RW_S CONST D=2 ]
        [ ALU=A bus_A=R2 bus_B=WR_L ]
:MARK2  [ ALU=A+B bus_A=R5 bus_B=F RD_MEM_A ]
        [ bus_B=WR_PC RD_MEM_D CALL ADR=PUT_PC ]
        [ ALU=A-B bus_A=S bus_B=H FLAG=CARRY ]
        [ GO_TRUE ADR=TRAP40S ]
        [ FLAG=ZERO  FINISH ]

:GET_PC [ ALU=ASL(A-B) bus_A=RW_PC bus_B=F ]
        [ ALU=ASL(A)   bus_A=RW_PC ]
        [ ALU=A+B      bus_A=RW_PC RW_PC RETURN ]

:PUT_PC [ ALU=A bus_A=PC RW_PC ]
        [ ALU=ASR(A) bus_A=RW_PC ]
:PUT_PC2[ ALU=ASR(A) bus_A=RW_PC ]
        [ ALU=A+B bus_A=RW_PC bus_B=F RD_MEM_A ]
        [ WR_CASH RD_MEM_D RETURN ]

:NEXT2  % R1,R2 - Next2         time=14
        [ UPDATE_CASH ]
        [ bus_B=WR_R1 INC_PC ]
        [ UPDATE_CASH ]
        [ bus_B=WR_R2 INC_PC ]
        [ CALL ADR=ROL(R2,8) ]
        [ ALU=A_OR_B bus_A=RW_R1 bus_B=RW_R2 RETURN ]

:NEXT4  % R2 - Next4. Destroed R5, R4, R3
        [ UPDATE_CASH ]
        [ bus_B=WR_R5 INC_PC ]
        [ UPDATE_CASH ]
        [ bus_B=WR_R4 INC_PC ]
        [ UPDATE_CASH ]
        [ bus_B=WR_R3 INC_PC ]
        [ UPDATE_CASH ]
        [ bus_B=WR_R2 INC_PC ]
        [ CALL ADR=ROL(R2,8) ]
        [ ALU=A_OR_B bus_A=RW_R2 bus_B=R3 CALL ADR=ROL(R2,8) ]
        [ ALU=A_OR_B bus_A=RW_R2 bus_B=R4 CALL ADR=ROL(R2,8) ]
        [ ALU=A_OR_B bus_A=RW_R2 bus_B=R5 RETURN ]

%%%%%%%%%%%%%%%% For Labtam hadware interchange
:TRB_1  [ CONST->R2 D=0FF ]
        [ ALU=ROR(A_BIC_B) bus_A=Etop  CONST->R3 D=3 ]
        [ ALU=A_AND_B      bus_A=Etop  CONST->R1 D=3 FLAG=Z ]
        [ ALU=A bus_A=R1   bus_B=WR_R5 GO_TRUE ADR=TRB_2 ]
:TRB_3  [ ALU=A-1          bus_A=RW_R1 FLAG=Z CALL ADR=ROL(R2,8) ]
        [ GO_FALSE ADR=TRB_3 ]
        %%%
:TRB_2  % R2 - mask, R5 - low, R3 - high
        %%%
        [ ALU=ROR(A)  bus_A=RW_R3 RD_MEM_A ]
        [             bus_B=WR_R4 RD_LOCK  ]
        [ ALU=A       bus_A=R4    bus_B=WR_Etop LOCK_MEM ]
        [ ALU=A_BIC_B bus_A=RW_R4 bus_B=R2 LOCK_MEM ]
        [             bus_B=R3    WR_MEM_A ]
        [             bus_B=R4    WR_MEM_D ]
% byte reseted ...
        [ ALU=A       bus_A=R5    FLAG=Z   ]
        [ ALU=A_AND_B bus_A=Etop  bus_B=RW_R2
          GO_TRUE     ADR=TRB_4 ]
:TRB_5  [ ALU=A-1     bus_A=RW_R5 FLAG=Z CALL ADR=ROR(R2,8) ]
        [ GO_FALSE ADR=TRB_5 ]
:TRB_4  [ ALU=A       bus_A=R2    bus_B=WR_Etop FLAG=ZERO FINISH ]

%%%%%%%%%%%%%% Floating point operations
:F_RESTORE    %  Time = 5
        [ bus_A=STACK->M  ]                           % restore M
        [ bus_A=STACK->PC ]                           % restore PC
        [ bus_A=STACK->L  ]                           % restore L
        [ bus_A=STACK->G  ]                           % restore G
        [ bus_A=STACK->Time FLAG=ZERO RETURN ]        % restore Time

%%%%%%       UNPACK    Time = 28
%
%      UNPACK Note! R1:=ROL(R1,1)   Etop:=ROL(Etop,1)
%%%%%%
:UNPACK % constFF=FF000000h
        % const02=02000000h
        [ bus_A=STACK->R1 ]             %  R1 - left operand
        [ bus_A=Time->STACK ]           %  save Time(==s2)
        [ bus_A=G->STACK ]              %  save G   (==constFF)
        [ bus_A=L->STACK ]              %  save L   (==const02)
        [ bus_A=PC->STACK ]             %  save PC  (==tmp1)
        [ bus_A=M->STACK                %  save M   (==tmp2)
          ADR=ROR(R2,7) REG_EN ]
        [ ALU=ROR(B) CONST->R2 D=002 CALL_REG ]
        [ ALU=A bus_A=R2 bus_B=WR_const02 ]
        [ ALU=ROR(B) CONST->R2 D=0FF CALL_REG ]
        [ ALU=A bus_A=R2 bus_B=WR_constFF ]
        [ ALU=ROL(A)  bus_A=RW_R1   FLAG=Z ]
        [ ALU=A       bus_A=constFF bus_B=WR_e1 ]
        [ ALU=A_AND_B bus_A=R1      bus_B=RW_e1 GO_TRUE ADR=UNPACK1 ]
        [ CALL ADR=ROL(R2,8) ]  % e1=R2
        [ ALU=A_AND_B bus_A=R1      CONST->s1 D=1 ]
        [ ALU=A_OR_B  bus_A=constFF CONST->m1 D=1 ]
        [ ALU=ROL(A_BIC_B) bus_A=R1   bus_B=RW_m1 ]
        [ ALU=A_OR_B bus_A=RW_m1 bus_B=const02 GOTO ADR=UNPACK2 ]

:UNPACK1[ ALU=B bus_A=WR_s1 CONST->m1 D=0 ]

:UNPACK2[ ALU=ROL(A)  bus_A=RW_Etop FLAG=Z ]
        [ ALU=A       bus_A=constFF bus_B=WR_e2 ]
        [ ALU=A_AND_B bus_A=Etop    bus_B=RW_e2 GO_TRUE ADR=UNPACK3 ]
        [ ALU=ROL(A) bus_A=RW_e2 ]
        [ ALU=ROL(A) bus_A=RW_e2 ]
        [ ALU=ROL(A) bus_A=RW_e2 ]
        [ ALU=ROL(A) bus_A=RW_e2 ]
        [ ALU=ROL(A) bus_A=RW_e2 ]
        [ ALU=ROL(A) bus_A=RW_e2 ]
        [ ALU=ROL(A) bus_A=RW_e2 ]
        [ ALU=ROL(A) bus_A=RW_e2 ]
        [ ALU=A_AND_B bus_A=Etop    CONST->s2 D=1 ]
        [ ALU=A_OR_B  bus_A=constFF CONST->m2 D=1 ]
        [ ALU=ROL(A_BIC_B) bus_A=Etop bus_B=RW_m2 ]
        [ ALU=A_OR_B bus_A=RW_m2 bus_B=const02 RETURN ]

:UNPACK3[ ALU=B bus_A=WR_s2 CONST->m2 D=0 RETURN ]


:UNPACK_FFCT
        [ bus_A=Time->STACK ]                   %  save Time(==s2)
        [ bus_A=G->STACK ]                      %  save G   (==constFF)
        [ bus_A=L->STACK ]                      %  save L   (==const02)
        [ bus_A=PC->STACK ]                     %  save PC  (==tmp1)
        [ bus_A=M->STACK                        %  save M   (==tmp2)
          ADR=ROR(R2,7) REG_EN ]
        [ ALU=ROR(B) CONST->R2 D=002 CALL_REG ]
        [ ALU=A bus_A=R2 bus_B=WR_const02 ]
        [ ALU=ROR(B) CONST->R2 D=0FF CALL_REG ]
        [ ALU=A bus_A=R2 bus_B=WR_constFF RETURN ]

%%%%%     NORMAL   Time = max 118  min 18  avg 62
%%%%%     NORMAL 0 Time = 4
%%%%%     return FLAG if uderflow

:NORMAL_ADD
        [ ALU=A bus_A=m1 FLAG=Z CALL ADR=NORM_5 ]
        [ GO_FALSE ADR=PACK ]
        [ ALU=A-B bus_A=RW_Etop bus_B=Etop GOTO ADR=F_RESTORE ]

:NORMAL_MUL
        [ ALU=A bus_A=m1 FLAG=Z CALL ADR=NORM_5 ]
        [ GO_FALSE ADR=PACK ]

:TRAP43 [ ALU=A bus_A=constFF bus_B=WR_Etop ]
        [ ALU=ROR(A_OR_B) bus_A=RW_Etop bus_B=s1 CALL ADR=F_RESTORE ]
        [ CONST->R1 D=43 ]
        [ GOTO ADR=TRAPED ]

:NORM_5 [ ALU=ROL(A) bus_A=const02 bus_B=WR_tmp1 GO_FALSE ADR=NORM_1 ]
        [ CONST->e1 ALU=B bus_A=WR_s1 D=0 RETURN FLAG=ZERO ]
:NORM_1 [ ALU=A-B bus_A=m1 bus_B=tmp1 FLAG=CARRY ]
        [ GO_FALSE ADR=NORM_2 ALU=A+1 bus_A=RW_e1 ]% while m1>=INTEGER({26}) do
        [ ALU=A_BIC_B bus_A=RW_m1 CONST D=1 ]      % ASR->ROR because 80000000
        [ ALU=ROR(A) bus_A=RW_m1 GOTO ADR=NORM_1 ] %   inc(e1); m1:=shr(m1,1)
                                                   % end (max=2)
:NORM_2 [ ALU=A-B bus_A=m1 bus_B=const02 FLAG=CARRY ]
        [ GO_TRUE ADR=NORM_3 ALU=A-1 bus_A=RW_e1 ] % while m1<INTEGER({25}) do
        [ ALU=ASL(A) bus_A=RW_m1 GOTO ADR=NORM_2 ] %   dec(e1); m1:=shl(m1,1)
                                                   % end (max=24)
:NORM_3 [ ALU=A+B bus_A=RW_m1 CONST D=2 ]          % loop  m1:=m1+2
        [ ALU=A_AND_B bus_A=m1 bus_B=tmp1 FLAG=Z ] %   if 26 & m1 = 0 then
        [ GO_TRUE ADR=NORM_4 ]                     %     exit
        [ ALU=A+1 bus_A=RW_e1 ]                    %   else inc(e1)
        [ ALU=ASR(A) bus_A=RW_m1 GOTO ADR=NORM_3 ] %     m1:=shr(m1,1)
                                                   % end loop (max=2)
:NORM_4
        [ ALU=A+B bus_A=e1 bus_B=e1 FLAG=CARRY ]
        [ RETURN_TRUE ]
        [ ALU=B-A CONST D=0FF bus_A=e1 FLAG=CARRY ]
        [ RETURN_TRUE FLAG=ZERO ]
        [ GOTO ADR=TRAP42 ]                        % if e1>0FF  then
                                                   %   goto TRAP42 end
                                                   % FLAG:= e1<0

%%%%          PACK     Time = 13
:PACK   [ ALU=ROR(A) bus_A=RW_e1 CALL ADR=ROR(R2,7) ] % R2=e1
        [ ALU=A_BIC_B bus_A=RW_m1 CONST D=3 ]          % m1:=m1-{0,1}
        [ ALU=ROR(A_BIC_B) bus_A=RW_m1 bus_B=const02 ] % m1:=ROR(m1-{25},1)
        [ ALU=A_OR_B  bus_A=RW_e1 bus_B=m1  ]          % e1:=e1+m1
        [ ALU=A_OR_B  bus_A=RW_e1 bus_B=s1  ]          % e1:=e1+s1
        [ ALU=ROR(A)  bus_A=e1    bus_B=WR_Etop        % Push(ror(e1,1))
          GOTO ADR=F_RESTORE                ]

%%%%   UNPACK+PACK+NORM  Time avg 142

:TRAP42 [ CALL ADR=F_RESTORE ]
        [ CONST->Etop D=0 ]
        [ CONST->R1 D=42 ]
        [ GOTO ADR=TRAPED ]

%%%%%     FADD_SUB  Time  min     max    avg
%%%%%               Time        best 69


:FSUB_SUB
        [ CALL ADR=FNEG_SUB ]
:FADD_SUB
        [ CALL ADR=UNPACK ]
        [ ALU=A-B bus_A=e1 bus_B=e2 FLAG=CARRY ]
        [ ALU=A-B bus_A=e1 bus_B=e2 FLAG=Z GO_TRUE ADR=FADD1 ]

    % e1<e2
        [ ALU=A-B bus_A=e2 bus_B=RW_e1 ]
        [ ALU=A-B bus_A=e1 CONST D=27. FLAG=CARRY ]
        [ GO_FALSE ADR=FADD2 ]
        [ ALU=ROR(A) bus_A=RW_Etop GOTO ADR=F_RESTORE ]
:FADD2  [ ALU=A_AND_B bus_A=e1 CONST D=10 FLAG=Z ]
        [ GO_TRUE ADR=FADD3 ]
        [ CALL ADR=ASRm1 ]
        [ CALL ADR=ASRm1 ]
:FADD3  [ ALU=A_AND_B bus_A=e1 CONST D=8 FLAG=Z ]
        [ CALL_FALSE ADR=ASRm1 ]
:FADD4  [ ALU=A_AND_B bus_A=RW_e1 CONST D=7 FLAG=Z ]
:FADD5  [ ALU=A-1 bus_A=RW_e1 FLAG=Z GO_TRUE ADR=FADD6 ]
        [ ALU=ASR(A) bus_A=RW_m1 GO_FALSE ADR=FADD5 ]
:FADD6  [ ALU=A_XOR_B bus_A=s1 bus_B=s2 FLAG=Z ]
        [ ALU=A bus_A=s2 bus_B=WR_s1 ]
        [ ALU=A bus_A=e2 bus_B=WR_e1 GO_FALSE ADR=FADD8 ]
        [ ALU=A+B bus_A=m2 bus_B=RW_m1 GOTO ADR=NORMAL_ADD ]
:FADD8  [ ALU=A-B bus_A=m2 bus_B=RW_m1 GOTO ADR=NORMAL_ADD ]

    % e1>e2
:FADD1  [ ALU=A-B bus_A=e1 bus_B=RW_e2 GO_TRUE ADR=FADD_EQ ]
        [ ALU=A-B bus_A=e2 CONST D=27. FLAG=CARRY ]
        [ GO_FALSE ADR=FADD12 ]
        [ ALU=ROR(A) bus_A=RW_R1 bus_B=WR_Etop GOTO ADR=F_RESTORE ]
:FADD12 [ ALU=A_AND_B bus_A=e2 CONST D=10 FLAG=Z ]
        [ GO_TRUE ADR=FADD13 ]
        [ CALL ADR=ASRm2 ]
:FADD13 [ ALU=A_AND_B bus_A=e2 CONST D=8 FLAG=Z ]
        [ CALL_FALSE ADR=ASRm2 ]
        [ ALU=A_AND_B bus_A=RW_e2 CONST D=7 FLAG=Z ]
:FADD15 [ ALU=A-1 bus_A=RW_e2 FLAG=Z GO_TRUE ADR=FADD16 ]
        [ ALU=ASR(A) bus_A=RW_m2 GO_FALSE ADR=FADD15 ]
:FADD16 [ ALU=A_XOR_B bus_A=s1 bus_B=s2 FLAG=Z ]
        [ GO_FALSE ADR=FADD18 ]
        [ ALU=A+B bus_A=RW_m1 bus_B=m2 GOTO ADR=NORMAL_ADD ]
:FADD18 [ ALU=A-B bus_A=RW_m1 bus_B=m2 GOTO ADR=NORMAL_ADD ]

:FADD_EQ[ ALU=A_XOR_B bus_A=s1 bus_B=s2 FLAG=Z ]
        [ ALU=A-B bus_A=m1 bus_B=m2 FLAG=CARRY GO_FALSE ADR=FADD20 ]
        [ ALU=A+B bus_A=RW_m1 bus_B=m2 GOTO ADR=NORMAL_ADD ]
:FADD20 [ GO_FALSE ADR=FADD21 ]
        [ ALU=A-B bus_A=RW_m1 bus_B=m2 GOTO ADR=NORMAL_ADD ]
:FADD21 [ ALU=A bus_A=s2 bus_B=WR_s1 ]
        [ ALU=A-B bus_A=m2 bus_B=RW_m1 GOTO ADR=NORMAL_ADD ]

:ASRm1  [ ALU=ROR(A) bus_A=RW_m1 ]
        [ ALU=ROR(A) bus_A=RW_m1 ]
        [ ALU=ROR(A) bus_A=RW_m1 ]
        [ ALU=ROR(A) bus_A=RW_m1 ]
        [ ALU=ROR(A) bus_A=RW_m1 ]
        [ ALU=ROR(A) bus_A=RW_m1 ]
        [ ALU=ROR(A) bus_A=RW_m1 ]
        [ ALU=ROR(A) bus_A=RW_m1 ]
        [ ALU=A_BIC_B bus_A=RW_m1 bus_B=constFF RETURN ]
:ASRm2  [ ALU=ROR(A) bus_A=RW_m2 ]
        [ ALU=ROR(A) bus_A=RW_m2 ]
        [ ALU=ROR(A) bus_A=RW_m2 ]
        [ ALU=ROR(A) bus_A=RW_m2 ]
        [ ALU=ROR(A) bus_A=RW_m2 ]
        [ ALU=ROR(A) bus_A=RW_m2 ]
        [ ALU=ROR(A) bus_A=RW_m2 ]
        [ ALU=ROR(A) bus_A=RW_m2 ]
        [ ALU=A_BIC_B bus_A=RW_m2 bus_B=constFF RETURN ]


%%%%    Time 238
:FMUL_SUB
        [ CALL ADR=UNPACK ]
        [ ALU=A+B bus_A=RW_e1 bus_B=e2 ]                %  e1:=e1+e2
        [ ALU=A-B bus_A=RW_e1 CONST D=80 ]              %  e1:=e1+80
        [ ALU=A_XOR_B bus_A=RW_s1 bus_B=s2 ]            %  s1:=s1 xor s2
        [ ALU=A bus_A=m1 bus_B=WR_tmp1 ]                %  tmp1:=m1
        [ CONST->m1 D=0 ]                               %  m1:=0

:FMUL_1 [ ALU=A_AND_B bus_A=m2 CONST D=1 FLAG=Z ]       % repeat nz:=0 IN m2
        [ ALU=ASR(A)  bus_A=RW_m2  FLAG=Z               %   m2:=shr(m2,1)
                                                        %   z:=(m2=0)
                      GO_TRUE ADR=FMUL_2 ]              %   if nz then
        [ ALU=A+B bus_A=RW_m1 bus_B=tmp1 ]              %     m1:=m1+tmp1
                                                        %   end
:FMUL_2 [ ALU=ASR(A) bus_A=RW_m1 GO_FALSE ADR=FMUL_1 ]  %   m1:=shr(m1,1)
                                                        % until z
        [ GOTO ADR=NORMAL_MUL ]

%%%%  FDIV_SUB   Time  252

:FDIV_SUB
        [ CALL ADR=UNPACK ]
        [ ALU=A bus_A=m2 FLAG=Z ]                       % if m2=0 then
        [ GO_TRUE ADR=TRAP42                            %   goto TRAP42
          ALU=A-B bus_A=RW_e1 bus_B=e2 ]                % end; e1:=e1-e2
        [ ALU=A+B bus_A=RW_e1 CONST D=80 ]              % e1:=e1+80
        [ ALU=A_XOR_B bus_A=RW_s1 bus_B=s2 ]            % s1:=s1 xor s2
        [ ALU=A bus_A=m1 bus_B=WR_tmp1 ]                % tmp1:=m1
        [ CONST->m1 D=0 ]                               % m1:=0

:FDIV_1 [ ALU=A-B bus_A=tmp1 bus_B=m2 FLAG=CARRY ]      % repeat z:=tmp1>=m2
        [ GO_FALSE ADR=FDIV_2 ]                         %   if z then
        [ ALU=A-B bus_A=RW_tmp1 bus_B=m2 ]              %     tmp1:=tmp1-m2
        [ ALU=A+1 bus_A=RW_m1 ]                         %     m1:=m1+1
:FDIV_2 [ ALU=ASR(A) bus_A=RW_m2 FLAG=Z ]               %   end m2:=shr(m2,1)
        [ ALU=ROL(A) bus_A=RW_m1 GO_FALSE ADR=FDIV_1 ]  %   m1:=rol(m1,1)
                                                        % until m2=0
        [ GOTO ADR=NORMAL_MUL ]


:FCMP_SUB % EXIT by FINISH !
        [ ALU=A-B bus_A=Etop bus_B=R1 FLAG=Z ]   % if Etop=R1 then
        [ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY GO_FALSE ADR=FCMP_1 ]
:FCM_EQU
        [ CONST->Etop D=0 ]                      %  Push(0); Push(0);
        [ bus_A=Etop->STACK  FLAG=ZERO FINISH ]  %  FINISH
:FCMP_1
        [ ALU=ROR(B) CONST->R2 D=1 ]
        [ ALU=A+B bus_A=R1 bus_B=R1 FLAG=CARRY GO_FALSE ADR=FCMP_2 ]
        [ ALU=A-B-1 bus_A=R2 bus_B=RW_Etop ]
:FCMP_2
        [ ALU=A_BIC_B bus_A=RW_R3 bus_B=R3 GO_FALSE ADR=FCMP_3 ]% R3 := 0
        [ ALU=A-B-1 bus_A=R2 bus_B=RW_R1 ]
:FCMP_3 [ ALU=A-B bus_A=R1 bus_B=RW_Etop FLAG=OVR ]
        [ GO_FALSE ADR=FCMP_4 ]
        [ ALU=NE(A) bus_A=RW_Etop ]
:FCMP_4 [ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY ]
        [ ALU=ROL(A) bus_A=RW_R2 GO_TRUE ADR=FCMP_LSS ]% R2 := 1
:FCMP_GTR
        [ bus_A=R2->STACK CONST->Etop D=0 ] [ FLAG=ZERO FINISH ]
:FCMP_LSS
        [ bus_A=R3->STACK CONST->Etop D=1 ] [ FLAG=ZERO FINISH ]

:FFCT_SUB
        [ UPDATE_CASH ]
        [ ALU=B INC_PC bus_B=WR_R1 FLAG=Z ]
        [ GO_TRUE ADR=FFCT_FLOAT ALU=A-1 bus_A=RW_R1 FLAG=Z ]
        [ GO_TRUE ADR=FFCT_TRUNC ALU=A-1 bus_A=RW_R1 FLAG=Z ]
        [ CALL ADR=DEC_PC ]
        [ CONST->R1 D=7 ]
        [ GOTO ADR=TRAPED ]

:FFCT_FLOAT
        [ CALL ADR=UNPACK_FFCT ]
        [ CONST->e1 D=9A ]
        [ CONST->s1 D=00 ]
        [ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY ]
        [ ALU=A bus_A=Etop bus_B=WR_m1 GO_FALSE ADR=NORMAL_MUL ]
        [ CONST->s1 D=1 ]
        [ ALU=NEG(A) bus_A=RW_m1 GOTO ADR=NORMAL_MUL ]

:FFCT_TRUNC
        [ ALU=ROL(A)  bus_A=RW_Etop FLAG=Z ]
        [ RETURN_TRUE FLAG=ZERO ]
:FFCT_TRUNC1
        [ CALL ADR=UNPACK_FFCT ]
        [ ALU=A       bus_A=constFF bus_B=WR_e1 ]
        [ ALU=A_AND_B bus_A=Etop    bus_B=RW_e1 CALL ADR=ROL(R2,8) ]
        [ ALU=A_AND_B bus_A=Etop    CONST->s1 D=1 ]
        [ ALU=A_OR_B  bus_A=constFF CONST->m1 D=1 ]
        [ ALU=ROL(A_BIC_B) bus_A=RW_Etop bus_B=m1 ]
        [ ALU=A_OR_B bus_A=RW_Etop  bus_B=const02 ]

        [ ALU=A-B bus_A=RW_e1 CONST D=80 FLAG=CARRY ]  %      if e1<80 then
        [ GO_TRUE ADR=TRUNC_1 ]
        [ ALU=A-B bus_A=Etop bus_B=RW_Etop GOTO ADR=F_RESTORE ] % Etop:=0
:TRUNC_1
        [ ALU=B-A CONST D=1A bus_A=RW_e1 FLAG=N ]
        [ GO_FALSE ADR=TRUNC_3 ALU=A bus_A=e1 FLAG=Z ]

:TRUNC_4  % shift right
        [ ALU=A-1 bus_A=RW_e1 FLAG=Z GO_TRUE ADR=F_RESTORE ]
        [ ALU=ASR(A) bus_A=RW_Etop FLAG=ZERO GO_FALSE ADR=TRUNC_4 ]
        [ ALU=A bus_A=s1 FLAG=Z ]
        [ FLAG=ZERO GO_TRUE ADR=F_RESTORE ]
        [ ALU=NEG(A) bus_A=RW_Etop GOTO ADR=F_RESTORE ]

:TRUNC_3  % shift left
        [ ALU=A+1 bus_A=RW_e1 FLAG=Z GO_TRUE ADR=TRUNC_OVR ]
        [ ALU=A+B bus_A=RW_Etop bus_B=Etop FLAG=OVR GO_FALSE ADR=TRUNC_3 ]
        [ ALU=A bus_A=s1 FLAG=Z GO_TRUE ADR=TRUNC_OVR ]
        [ FLAG=ZERO GO_TRUE ADR=F_RESTORE ]
        [ ALU=NEG(A) bus_A=RW_Etop GOTO ADR=F_RESTORE ]
:TRUNC_OVR
        [ CALL ADR=F_RESTORE ]
        [ GOTO ADR=TRAP41 ]

:FNEG_SUB
        [ ALU=A bus_A=Etop FLAG=Z ]
        [ ALU=ROR(B) CONST->R1 D=1 FLAG=ZERO RETURN_TRUE ]
        [ ALU=A_XOR_B bus_A=RW_Etop bus_B=R1 RETURN ]

:FABS_SUB
        [ ALU=ROR(B) CONST->R1 D=1 ]
        [ ALU=A_BIC_B bus_A=RW_Etop bus_B=R1 RETURN ]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:IMUL   % R1*Etop->Etop, FLAG=Overflow

        [ ALU=A bus_A=Etop FLAG=N ]
        [ ALU=A bus_A=R1   FLAG=N GO_FALSE ADR=IMUL_?-]
        [                         GO_FALSE ADR=IMUL_-+]

:IMUL_++[ CALL ADR=IMUL_SUB ]
        [ ALU=A   bus_A=R2 bus_B=WR_Etop RETURN_TRUE ]
        [ ALU=A+B bus_A=R2 bus_B=R2      RETURN FLAG=CARRY ]

:IMUL_?-[ ALU=NEG(A) bus_A=RW_Etop  GO_TRUE ADR=IMUL_+-]
:IMUL_--[ ALU=NEG(A) bus_A=RW_R1    CALL    ADR=IMUL_SUB ]
        [ ALU=A   bus_A=R2 bus_B=WR_Etop    RETURN_TRUE ]
        [ ALU=A+B bus_A=R2 bus_B=R2         RETURN FLAG=CARRY ]

:IMUL_-+[ ALU=NEG(A) bus_A=RW_R1 ]
:IMUL_+-[ CALL ADR=IMUL_SUB ]
        [ ALU=NEG(A) bus_A=R2  bus_B=WR_Etop RETURN_TRUE ]
        [ ALU=ROR(B) CONST->R3 D=1 ]
        [ ALU=A-B-1  bus_A=R2  bus_B=R3      RETURN FLAG=CARRY ]


:IMUL_SUB % R1*Etop -> R2 (FLAG=OVERFLOW)
        [ CONST->R3 D=1 ]
        [ ALU=A_BIC_B  bus_A=RW_R2 bus_B=R2 FLAG=ZERO GOTO ADR=IMUL_7 ]

:IMUL_2 [ ALU=A+B     bus_A=RW_R1 bus_B=R1 FLAG=CARRY GO_TRUE  ADR=IMUL_OK  ]
:IMUL_7 [ ALU=A_AND_B bus_A=Etop  bus_B=R3 FLAG=Z     GO_TRUE  ADR=IMUL_6o  ]
:IMUL_6 [ ALU=ROR(A_BIC_B) bus_A=RW_Etop bus_B=R3 FLAG=Z GO_TRUE ADR=IMUL_2 ]
        [ ALU=A+B     bus_A=RW_R2 bus_B=R1 FLAG=CARRY RETURN_TRUE           ]
        [ ALU=A+B     bus_A=RW_R1 bus_B=R1 FLAG=CARRY GO_FALSE ADR=IMUL_7   ]
        [ GOTO ADR=IMUL_7o ]

:IMUL_OK[ FLAG=ZERO RETURN ]
        % Calculation correct result after OVERFLOW occur
:IMUL_2o[ ALU=A+B     bus_A=RW_R1 bus_B=R1        RETURN_TRUE ]
:IMUL_7o[ ALU=A_AND_B bus_A=Etop  bus_B=R3 FLAG=Z             ]
:IMUL_6o[ ALU=ROR(A_BIC_B) bus_A=RW_Etop bus_B=R3 FLAG=Z GO_TRUE ADR=IMUL_2o ]
        [ ALU=A+B     bus_A=RW_R2 bus_B=R1 RETURN_TRUE        ]
        [ ALU=A+B     bus_A=RW_R1 bus_B=R1 GOTO ADR=IMUL_7o   ]

:IQUOT  % R1/Etop->Etop
        % return: R1 - остаток, FLAG - overflow
        [ ALU=A+B bus_A=R1 bus_B=R1 FLAG=CARRY ]
        [ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY GO_TRUE ADR=IQUOT1 ]
        [ GO_FALSE ADR=IQUOT_SUB ]
:IQUOT2   % делимое > 0, делитель < 0
        [ ALU=NEG(A) bus_A=RW_Etop ]
        [ CALL ADR=IQUOT_SUB ]
        [ ALU=NEG(A) bus_A=RW_Etop RETURN ]
:IQUOT1 [ GO_TRUE ADR=IQUOT3 ]
        % делимое < 0, делитель > 0
        [ ALU=NEG(A) bus_A=RW_R1 ]
        [ CALL ADR=IQUOT_SUB ]
        [ ALU=NEG(A) bus_A=RW_R1 ]
        [ ALU=NEG(A) bus_A=RW_Etop RETURN ]
:IQUOT3   % делимое < 0, делитель < 0
        [ ALU=NEG(A) bus_A=RW_R1 ]
        [ ALU=NEG(A) bus_A=RW_Etop ]
        [ CALL ADR=IQUOT_SUB ]
        [ ALU=NEG(A) bus_A=RW_R1 RETURN ]

:IQUOT_SUB % R1/Etop->Etop,R1 for cardinal.
        [ CONST->R2 D=0 ]
        [ ALU=A bus_A=Etop FLAG=Z ]
        [ ALU=B bus_A=WR_R4 CONST->R3 D=1 RETURN_TRUE ] % return if div by zero
        [ ALU=A-B bus_A=Etop bus_B=R1 FLAG=CARRY ] % flag = (Etop>=R1)
        [ GO_TRUE ADR=IQUOT_LP ]
:IQUOT11[ ALU=A+B    bus_A=RW_Etop bus_B=Etop ]
        [ ALU=A-B    bus_A=Etop    bus_B=R1 FLAG=CARRY ]
        [ ALU=A+B    bus_A=RW_R3   bus_B=R3 GO_FALSE ADR=IQUOT11 ]
:IQUOT_LP
        [ ALU=A-B    bus_A=R1      bus_B=Etop FLAG=CARRY ]% flag = (R1>=Etop)
        [ GO_FALSE ADR=IQUOT12 FLAG=ZERO ]
        [ ALU=A_OR_B bus_A=RW_R2   bus_B=R3 ]
:IQUOT14[ ALU=A-B    bus_A=RW_R1   bus_B=Etop ]
:IQUOT12[ ALU=ROR(A) bus_A=RW_Etop GO_TRUE ADR=IQUOT13 ]% flag = (R3=0)
        [ ALU=A-B    bus_A=R1      bus_B=Etop    FLAG=CARRY ]
        [ ALU=ROR(A_BIC_B) bus_A=RW_R3 bus_B=R4  FLAG=Z GO_FALSE ADR=IQUOT12 ]
        [ ALU=A_OR_B bus_A=RW_R2   bus_B=R3             GO_FALSE ADR=IQUOT14 ]
:IQUOT13[ ALU=A      bus_A=R2      bus_B=WR_Etop FLAG=ZERO RETURN ]

:IDIV   % R1/Etop->Etop
        % return: R1 - модуль, FLAG - overflow
        [ ALU=A+B bus_A=R1 bus_B=R1 FLAG=CARRY ]
        [ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY GO_TRUE ADR=IDIV1 ]
        [ GO_FALSE ADR=IQUOT_SUB ]
:IDIV2  % делимое > 0, делитель < 0  +
        [ ALU=NEG(A) bus_A=RW_Etop ]
        [ ALU=A bus_A=Etop bus_B=WR_R5 CALL ADR=IQUOT_SUB ]
        [ ALU=A bus_A=R1 FLAG=Z ]
        [ ALU=NEG(A) bus_A=RW_Etop RETURN_TRUE FLAG=ZERO ]
        [ ALU=A-B bus_A=RW_R1 bus_B=R5 ]
        [ ALU=A-1 bus_A=RW_Etop RETURN ]
:IDIV1  [ GO_TRUE ADR=IDIV3 ]
        % делимое < 0, делитель > 0  +
        [ ALU=NEG(A) bus_A=RW_R1 ]
        [ ALU=A bus_A=Etop bus_B=WR_R5 CALL ADR=IQUOT_SUB ]
        [ RETURN_TRUE ]
        [ ALU=A bus_A=R1 FLAG=Z ]
        [ ALU=NEG(A) bus_A=RW_Etop RETURN_TRUE FLAG=ZERO ]
        [ ALU=A-B bus_A=R5 bus_B=RW_R1 ]
        [ ALU=A-1 bus_A=RW_Etop RETURN ]
:IDIV3  % делимое < 0, делитель < 0
        [ ALU=NEG(A) bus_A=RW_R1 ]
        [ ALU=NEG(A) bus_A=RW_Etop ]
        [ CALL ADR=IQUOT_SUB ]
        [ ALU=NEG(A) bus_A=RW_R1 RETURN ]

:QUOT_1 [ UPDATE_CASH ]
        [ ALU=B bus_B=WR_R1 INC_PC FLAG=Z ]
        [ ALU=A-1 bus_A=RW_R1 FLAG=Z GO_FALSE ADR=QUOT_2 ]
        % shrq
        [ ALU=A bus_A=Etop bus_B=WR_R1 FLAG=Z ]
        [ bus_A=STACK->Etop ]
        [ GO_TRUE ADR=SHRQ_2 ]
        [ ALU=A-B bus_A=R1 CONST D=20 FLAG=CARRY ]
        [ ALU=A bus_A=Etop FLAG=N GO_TRUE ADR=SHRQ_4 ]
:SHRQ_3 [ FLAG=NEG(FLAG) ]
        [ ALU=A+FLAG bus_A=RW_Etop ]
        [ ALU=A-1 bus_A=RW_R1 FLAG=Z ]
        [ ALU=ASR(A) bus_A=RW_Etop FLAG=N GO_FALSE ADR=SHRQ_3 ]
:SHRQ_2 [ FLAG=ZERO FINISH ]
:SHRQ_4 [ CONST->Etop D=0 FLAG=ZERO FINISH ]
:QUOT_2 [ ALU=A-1 bus_A=RW_R1 FLAG=Z GO_FALSE ADR=QUOT_3 ]
        % qout
        [ bus_A=STACK->R1 CALL ADR=IQUOT ]
        [ FINISH ]
:QUOT_3 [ ALU=A-1 bus_A=RW_R1 FLAG=Z GO_FALSE ADR=QUOT_4 ]
        % andq
        [ bus_A=STACK->R1 ALU=A FLAG=N ]
        [ ALU=NE(A) bus_A=Etop  bus_B=WR_R2 GO_TRUE ADR=ANDQ_1 ]
        [ ALU=A_AND_B bus_A=RW_Etop bus_B=R1 FLAG=Z ]
        [ GO_TRUE ADR=ANDQ_1 ]
        [ ALU=A_OR_B bus_A=RW_Etop bus_B=R2 FLAG=ZERO FINISH ]
:ANDQ_1 [ ALU=A_AND_B bus_A=RW_Etop bus_B=R1 FLAG=ZERO FINISH ]
:QUOT_4 [ GO_FALSE ADR=QUOT_5 ]
        % rem
        [ bus_A=STACK->R1 CALL ADR=IQUOT ]
        [ ALU=A bus_A=R1 bus_B=WR_Etop FINISH ]
:QUOT_5 [ CALL ADR=DEC_PC ]
        [ GOTO ADR=NII ]
