:LI0=0200
        [ bus_A=Etop->STACK CONST->Etop D=0  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=1  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=2  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=3  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=4  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=5  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=6  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=7  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=8  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=9  FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=0A FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=0B FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=0C FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=0D FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=0E FINISH ][F]
        [ bus_A=Etop->STACK CONST->Etop D=0F FINISH ][F]
:LIB    [ UPDATE_CASH ]
        [ bus_A=Etop->STACK bus_B=WR_Etop INC_PC GOTO ADR=NOP ]
:LID    [ UPDATE_CASH ]
        [ bus_A=Etop->STACK bus_B=WR_Etop INC_PC GOTO ADR=LID_1 ]
:LIW    [ bus_A=Etop->STACK CALL ADR=NEXT4 ]
        [ ALU=A bus_A=R2 bus_B=WR_Etop FLAG=ZERO FINISH ]
:LIN    [ bus_A=Etop->STACK ALU=ROR(NE(B)) CONST->Etop D=0FF FINISH ][F]
:LLA    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A+B bus_A=L bus_B=WR_Etop INC_PC GOTO ADR=NOP ]
:LGA    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A+B bus_A=G bus_B=WR_Etop INC_PC GOTO ADR=NOP ]
:LSA    [ UPDATE_CASH ]
        [ ALU=A+B bus_A=Etop bus_B=WR_Etop INC_PC GOTO ADR=NOP ]
:LEA    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A-B-1 bus_A=G INC_PC RD_MEM_A GOTO ADR=LEA_1 ]
:JFLC   [ UPDATE_CASH ]
        [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=JFLC_1 ]
:JFL    [ UPDATE_CASH ]
        [ GOTO ADR=JFL_1 ]
:JFSC   [ UPDATE_CASH ]
        [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=JFSC_1 ]
:JFS    [ UPDATE_CASH ]
        [ GOTO ADR=JUMP bus_B=WR_R1 INC_PC ]
:JBLC   [ UPDATE_CASH ]
        [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=JBLC_1 ]
:JBL    [ UPDATE_CASH ]
        [ GOTO ADR=JBL_1 ]
:JBSC   [ UPDATE_CASH ]
        [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=JBSC_1 ]
:JBS    [ UPDATE_CASH ]
        [ GOTO ADR=JUMP ALU=NEG(B) bus_B=WR_R1 INC_PC ]
:LLW    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A+B bus_A=L INC_PC RD_MEM_A GOTO ADR=LLW_1 ]
:LGW    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A+B bus_A=G INC_PC RD_MEM_A GOTO ADR=LLW_1 ]
:LEW    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A-B-1 bus_A=G INC_PC RD_MEM_A GOTO ADR=LEW_1 ]
:LSW    [ UPDATE_CASH ]
        [ ALU=A+B bus_A=Etop INC_PC RD_MEM_A GOTO ADR=LLW_1 ]
:LLW4   [ ALU=A+B bus_A=L CONST D=4 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=5 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=6 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=7 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=8 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=9 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=0A RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=0B RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=0C RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=0D RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=0E RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=L CONST D=0F RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:SLW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ ALU=A+B bus_A=L INC_PC WR_MEM_A GOTO ADR=SLW_1 ]
:SGW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ ALU=A+B bus_A=G INC_PC WR_MEM_A GOTO ADR=SLW_1 ]
:SEW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ ALU=A-B-1 bus_A=G INC_PC RD_MEM_A GOTO ADR=SEW_1 ]
:SSW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ ALU=A+B bus_A=STACK->Etop INC_PC WR_MEM_A GOTO ADR=SLW_1 ]
:SLW4   [ ALU=A+B bus_A=L CONST D=04 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=05 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=06 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=07 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=08 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=09 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=0A WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=0B WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=0C WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=0D WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=0E WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=L CONST D=0F WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:LXB    [ ALU=A_AND_B bus_A=Etop CONST->R1 D=3 FLAG=Z ]
        [ ALU=ASR(A) bus_A=RW_Etop GOTO ADR=LXB_1 ]
:LXW    [ ALU=A+B bus_A=STACK->Etop bus_B=Etop RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:LGW2   [ ALU=A+B bus_A=G CONST D=02 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=03 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=04 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=05 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=06 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=07 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=08 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=09 RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=0A RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=0B RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=0C RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=0D RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=0E RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=G CONST D=0F RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:SXB    [ ALU=A_AND_B bus_A=Etop CONST->R3 D=0FF ]
        [ bus_A=STACK->Etop GOTO ADR=SXB_1 ]
:SXW    [ bus_A=STACK->R1 ]
        [ ALU=A+B bus_A=STACK->R1 bus_B=R1 WR_MEM_A GOTO ADR=SXW_1 ]
:SGW2   [ ALU=A+B bus_A=G CONST D=02 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=03 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=04 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=05 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=06 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=07 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=08 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=09 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=0A WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=0B WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=0C WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=0D WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=0E WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
        [ ALU=A+B bus_A=G CONST D=0F WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO  ADR=SLW_2 ]
:LSW0   [ ALU=A+B bus_A=Etop CONST D=00 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=01 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=02 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=03 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=04 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=05 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=06 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=07 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=08 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=09 RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=0A RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=0B RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=0C RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=0D RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=0E RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
        [ ALU=A+B bus_A=Etop CONST D=0F RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:SSW0   [ ALU=A+B bus_A=STACK CONST D=00 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=01 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=02 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=03 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=04 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=05 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=06 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=07 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=08 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=09 WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=0A WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=0B WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=0C WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=0D WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=0E WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
        [ ALU=A+B bus_A=STACK CONST D=0F WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=SLW_2 ]
:RESET  [ CALL ADR=RESET_QBUS ][ FLAG=ZERO FINISH ]
:QUIT   [ CONST->R4 D=0 ]
        [ GOTO ADR=HALTED ]
:GETM   [ bus_A=Etop->STACK ]
        [ ALU=A bus_A=M bus_B=WR_Etop FINISH ]
:SETM   [ bus_B=Etop RESET_DEBUG ]
        [ ALU=A bus_A=Etop bus_B=WR_M GOTO ADR=DROP ]
:TRAP   [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->Etop GOTO ADR=TRAPED ]
:TRA    [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->R2 GOTO ADR=TRA_1 ]
:TR     [ ALU=B bus_A=WR_R2 bus_B=Etop RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_LOCK GOTO ADR=TR_1 ]
:IDLE   [ GOTO ADR=IDLE_1 ] [F]
:ADD    [ ALU=A+B bus_A=STACK->Etop bus_B=Etop FLAG=OVR FINISH ][F]
:SUB    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=OVR FINISH ][F]
:MUL    [ bus_A=STACK->R1 CALL ADR=IMUL ] [ FINISH ]
:DIV    [ bus_A=STACK->R1 CALL ADR=IDIV ] [ FINISH ]
:SHL    [ ALU=A bus_A=Etop bus_B=WR_R1 FLAG=Z ]
        [ bus_A=STACK->Etop GOTO ADR=SHL_1 ]
:SHR    [ ALU=A bus_A=Etop bus_B=WR_R1 FLAG=Z ]
        [ bus_A=STACK->Etop GOTO ADR=SHR_1 ]
:ROL    [ ALU=A bus_A=Etop LOAD_CNT ]
        [ bus_A=STACK->Etop GOTO ADR=ROL_1 ]
:ROR    [ ALU=B-A bus_A=Etop CONST D=20 LOAD_CNT ]
        [ bus_A=STACK->Etop GOTO ADR=ROL_1 ]
:INP    [ GOTO ADR=INP_1 ][F]
:OUT    [ GOTO ADR=OUT_1 ][F]
:MINP   [ bus_B=Etop RD_MEM_A ]
        [ bus_B=WR_Etop RD_IO_D FINISH ]
:MOUT   [ bus_A=STACK->R1 ALU=A WR_MEM_A ]
        [ bus_B=Etop WR_IO_D GOTO ADR=DROP ]
:PIO    [ UPDATE_CASH ][ GOTO ADR=PIO_1 ]
:ARR_CMP[ bus_A=STACK->R1 ][ bus_A=STACK->R2 GOTO ADR=ARR_CMP_1 ]
:WM     [ bus_A=STACK->R1 ][ bus_A=STACK->R2 GOTO ADR=WM_1 ]
:BM     [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=BM_start ] [F]
:FADD   [ CALL ADR=FADD_SUB ] [ FLAG=ZERO FINISH ]
:FSUB   [ CALL ADR=FSUB_SUB ] [ FLAG=ZERO FINISH ]
:FMUL   [ CALL ADR=FMUL_SUB ] [ FLAG=ZERO FINISH ]
:FDIV   [ CALL ADR=FDIV_SUB ] [ FLAG=ZERO FINISH ]
:FCMP   [ bus_A=STACK->R1 GOTO ADR=FCMP_SUB ] [F]
:FABS   [ CALL ADR=FABS_SUB ] [ FLAG=ZERO FINISH ]
:FNEG   [ CALL ADR=FNEG_SUB ] [ FLAG=ZERO FINISH ]
:FFCT   [ CALL ADR=FFCT_SUB ] [ FLAG=ZERO FINISH ]
:LSS    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=N_XOR_OVR LONG ]
        [ ALU=B+NE_FLAG CONST->Etop D=0 FLAG=ZERO FINISH ]
:LEQ    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=N_XOR_OVR+Z LONG ]
        [ ALU=B+FLAG    CONST->Etop D=0 FLAG=ZERO FINISH ]
:GTR    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=N_XOR_OVR+Z LONG ]
        [ ALU=B+NE_FLAG CONST->Etop D=0 FLAG=ZERO FINISH ]
:GEQ    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=N_XOR_OVR LONG ]
        [ ALU=B+FLAG    CONST->Etop D=0 FLAG=ZERO FINISH ]
:EQU    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=Z ]
        [ ALU=B+FLAG    CONST->Etop D=0 FLAG=ZERO FINISH ]
:NEQ    [ ALU=A-B bus_A=STACK->Etop bus_B=Etop FLAG=Z ]
        [ ALU=B+NE_FLAG CONST->Etop D=0 FLAG=ZERO FINISH ]
:ABS    [ ALU=A+B bus_A=Etop bus_B=Etop FLAG=CARRY GOTO ADR=ABS_1 ][F]
:NEG    [ ALU=NEG(A) bus_A=RW_Etop FLAG=OVR FINISH ][F]
:OR     [ ALU=A_OR_B  bus_A=STACK->Etop bus_B=Etop FINISH ][F]
:AND    [ ALU=A_AND_B bus_A=STACK->Etop bus_B=Etop FINISH ][F]
:XOR    [ ALU=A_XOR_B bus_A=STACK->Etop bus_B=Etop FINISH ][F]
:BIC    [ ALU=A_BIC_B bus_A=STACK->Etop bus_B=Etop FINISH ][F]
:IN     [ ALU=A bus_A=Etop bus_B=WR_R4 ]
        [ bus_A=STACK->Etop GOTO ADR=IN_1 ]
:BIT    [ CALL ADR=BIT_S ][ GOTO ADR=BIT_1 ]
:NOT    [ ALU=A bus_A=Etop FLAG=Z ]
        [ ALU=B+FLAG bus_A=WR_Etop CONST D=0 FLAG=ZERO FINISH ]
:MOD    [ bus_A=STACK->R1 CALL ADR=IDIV ]
        [ ALU=A bus_A=R1 bus_B=WR_Etop FINISH ]
:DECS   [ ALU=NEG(A) bus_A=Etop bus_B=WR_R2 CALL ADR=CHECK_H ]
        [ ALU=A-B bus_A=RW_S bus_B=Etop GOTO ADR=DECS_1 ]
:DROP   [ bus_A=STACK->Etop FINISH ][F]
:LODFV  [ ALU=A bus_A=Etop bus_B=WR_R4 ][ bus_A=STACK->Etop GOTO ADR=LODFV_1 ]
:STORE  [ CALL ADR=SAVE_STK ]
        [ ALU=A-B bus_A=S bus_B=H FLAG=CARRY GOTO ADR=STORE_1 ]
:STOFV  [ CONST->R2 D=0F ][ GOTO ADR=STOFV_1 ]
:COPT   [ bus_A=Etop->STACK FINISH ][F]
:CPCOP  [ GOTO ADR=CPCOP_1 ][F]
:PCOP   [ ALU=A+1 bus_A=Etop bus_B=WR_R2 CALL ADR=CHECK_H ]
        [ bus_A=STACK->R1 GOTO ADR=PCOP_1 ]
:FOR1   [ CONST->R2 D=2 ] [ GOTO ADR=FOR1_1 ]
:FOR2   [ ALU=A-1 bus_A=S RD_MEM_A GOTO ADR=FOR2_1 ][F]
:ENTC   [ CONST->R2 D=1 ][ GOTO ADR=ENTC_1 ]
:XIT    [ ALU=A-1 bus_A=RW_S RD_MEM_A GOTO ADR=XIT_1 ][F]
:ADDPC  [ ALU=A        bus_A=PC    bus_B=WR_R1 ]
        [ ALU=ASL(A-B) bus_A=RW_R1 bus_B=F     GOTO ADR=ADDPC_1 ]
:JMP    [ ALU=A      bus_A=Etop bus_B=WR_PC CALL ADR=PUT_PC ]
        [ FLAG=ZERO  bus_A=STACK->Etop  FINISH ]
:ORJP   [ UPDATE_CASH ]
        [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=ORJP_1 ]
:ANDJP  [ UPDATE_CASH ]
        [ ALU=A bus_A=Etop FLAG=Z GOTO ADR=ANDJP_1 ]
:MOVE   [ GOTO ADR=MOVE_1 ][F]
:CHKNIL [ ALU=ROR(NE(B)) CONST->R1 D=0FF ]
        [ ALU=A-B bus_A=R1 bus_B=Etop FLAG=Z FINISH ]
:LSTA   [ GOTO ADR=LSTA_1 ][F]
:COMP   [ GOTO ADR=COMP_1 ][F]
:GB     [ UPDATE_CASH bus_A=Etop->STACK ]
        [ ALU=A bus_A=L bus_B=WR_Etop GOTO ADR=GB_1 ]
:GB1    [ bus_A=Etop->STACK bus_B=L RD_MEM_A ]
        [ bus_B=WR_Etop RD_MEM_D FINISH ]
:CHK    [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->R2 GOTO ADR=CHK_1 ]
:CHKZ   [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ ALU=A FLAG=N bus_A=STACK->Etop GOTO ADR=CHKZ_1 ]
:ALLOC  [ ALU=A bus_A=Etop bus_B=WR_R2 CALL ADR=CHECK_H ]
        [ ALU=A bus_A=Etop bus_B=WR_R2 GOTO ADR=ALLOC_1 ]
:ENTR   [ UPDATE_CASH ]
        [ ALU=A+B bus_A=S bus_B=WR_R1 INC_PC GOTO ADR=ENTR_1]
:RTN    [ ALU=A+B bus_A=L CONST D=2 RD_MEM_A ]
        [ bus_B=WR_PC FLAG=N RD_MEM_D GOTO ADR=RTN_1 ]
:NOP    [ FLAG=ZERO FINISH  ][F]
:CX     [ GOTO ADR=CX_1     ][F]
:CI     [ GOTO ADR=CI_1     ][F]
:CF     [ GOTO ADR=CF_1     ][F]
:CL     [ GOTO ADR=CL_2     ][F]
:CL00   [ CONST->R5 D=00 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL01   [ CONST->R5 D=01 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL02   [ CONST->R5 D=02 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL03   [ CONST->R5 D=03 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL04   [ CONST->R5 D=04 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL05   [ CONST->R5 D=05 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL06   [ CONST->R5 D=06 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL07   [ CONST->R5 D=07 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL08   [ CONST->R5 D=08 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL09   [ CONST->R5 D=09 ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL0A   [ CONST->R5 D=0A ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL0B   [ CONST->R5 D=0B ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL0C   [ CONST->R5 D=0C ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL0D   [ CONST->R5 D=0D ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL0E   [ CONST->R5 D=0E ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:CL0F   [ CONST->R5 D=0F ]
        [ ALU=A bus_A=S bus_B=WR_R2 WR_MEM_A GOTO ADR=Call_Global1 ]
:INCL   [ bus_A=STACK->R1 GOTO ADR=INCL_1 ][F]
:EXCL   [ bus_A=STACK->R1 GOTO ADR=EXCL_1 ][F]
:INL    [ GOTO ADR=INL_1 ][F]
:QUOT   [ GOTO ADR=QUOT_1 ][F]
:INC1   [ bus_B=Etop RD_MEM_A ][ bus_B=WR_R1 RD_MEM_D GOTO ADR=INC1_1 ]
:DEC1   [ bus_B=Etop RD_MEM_A ][ bus_B=WR_R1 RD_MEM_D GOTO ADR=DEC1_1 ]
:INC    [ ALU=A bus_A=Etop bus_B=WR_R2 ][ bus_A=STACK->Etop GOTO ADR=INC_1 ]
:DEC    [ ALU=A bus_A=Etop bus_B=WR_R2 ][ bus_A=STACK->Etop GOTO ADR=DEC_1 ]
:STOT   [ bus_B=S WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D GOTO ADR=STOT_1 ]
:LODT   [ ALU=A-1 bus_A=RW_S RD_MEM_A ]
        [ bus_A=Etop->STACK bus_B=WR_Etop RD_MEM_D FINISH ]
:LXA    [ bus_A=STACK->R1 CALL ADR=IMUL ]
        [ ALU=A+B bus_A=STACK->Etop bus_B=Etop FINISH ]
:LPC    [ UPDATE_CASH ] [ bus_A=Etop->STACK GOTO ADR=LPC_1 ]
:BBU    [ GOTO ADR=UNBPK_1 ][F]
:BBP    [ GOTO ADR=BPK_1   ][F]
:BBLT   [ GOTO ADR=BBLT_1  ][F]
:PDX    [ ALU=A bus_A=STACK->R1 RD_MEM_A ]
        [ bus_B=WR_R2 RD_MEM_D GOTO ADR=PDX_1 ]
:SWAP   [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->Etop GOTO ADR=SWAP_1 ]
:LPA    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A-B-1 bus_A=L bus_B=WR_Etop INC_PC GOTO ADR=NOP ]
:LPW    [ bus_A=Etop->STACK UPDATE_CASH ]
        [ ALU=A-B-1 bus_A=L INC_PC RD_MEM_A GOTO ADR=LLW_1 ]
:SPW    [ ALU=A bus_A=Etop bus_B=WR_R2 UPDATE_CASH ]
        [ ALU=A-B-1 bus_A=L INC_PC WR_MEM_A GOTO ADR=SLW_1 ]
:SSWU   [ bus_A=STACK->R1 ALU=A WR_MEM_A ]
        [ bus_B=Etop WR_MEM_D FINISH ]
:RCHK   [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ bus_A=STACK->R2 GOTO ADR=RCHK_1 ]
:RCHKZ  [ ALU=A bus_A=Etop bus_B=WR_R1 ]
        [ ALU=A FLAG=N bus_A=STACK->Etop GOTO ADR=RCHKZ_1 ]
:CM     [ UPDATE_CASH ] [ bus_B=WR_R5 INC_PC  GOTO ADR=CM_1 ]
:CHKBX  [ bus_A=STACK->R1 GOTO ADR=BOX_CHK ][F]
:BMG    [ UPDATE_CASH ][ bus_B=WR_R1 INC_PC ALU=B FLAG=Z GOTO ADR=GRAPHIC ]
:ACTIV  [ bus_A=Etop->STACK ][ ALU=A bus_A=P bus_B=WR_Etop FINISH ]
:USR    [ UPDATE_CASH ][ bus_B=WR_R1 INC_PC ALU=B FLAG=Z GOTO ADR=USER_SWITCH ]
:SYS    [ UPDATE_CASH ][ bus_B=WR_R1 INC_PC GOTO ADR=SYS_SWITCH ]
:NII    [ CONST->R1 D=7 ][ GOTO ADR=TRAPED ]
:DOT    [ GOTO ADR=DOT_1 ][F]
:INVLD  [ CONST->R1 D=49 ][ GOTO ADR=TRAPED ]
        [ ALU=A+1 bus_A=RW_PC RD_MEM_A DEC_CASH_PC ]
        [ WR_CASH RD_MEM_D ]
        [ FLAG=ZERO FINISH ]
